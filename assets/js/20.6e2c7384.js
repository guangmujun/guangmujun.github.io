(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{596:function(_,e,n){"use strict";n.r(e);var a=n(7),t=Object(a.a)({},(function(){var _=this,e=_.$createElement,n=_._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[n("h1",{attrs:{id:"_7大型程序的结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7大型程序的结构"}},[_._v("#")]),_._v(" 7大型程序的结构")]),_._v(" "),n("h2",{attrs:{id:"_7-1-前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-前言"}},[_._v("#")]),_._v(" 7.1 前言")]),_._v(" "),n("blockquote",[n("p",[_._v("项目地址：https://gitee.com/guangmujun/micro-blog 个人网站：https://guangmujun.cn\nFlask Web学习：https://guangmujun.cn/archives/category/learning-note/flask-web\nMySQL学习：https://guangmujun.cn/archives/category/learning-note/mysql-note 参考：")]),_._v(" "),n("ul",[n("li",[_._v("https://segmentfault.com/q/1010000006212779")]),_._v(" "),n("li",[_._v("https://blog.csdn.net/sinat_38682860/article/details/89764237")]),_._v(" "),n("li",[_._v("https://blog.csdn.net/chekongfu/article/details/83187591")])])]),_._v(" "),n("p",[_._v("从单一脚本方式调整为一种使用包和模块组织大型程序的方式 调整后的项目结构如下图所示：")]),_._v(" "),n("ul",[n("li",[_._v("Flask程序一般都保存在名为"),n("code",[_._v("app")]),_._v("的包中")]),_._v(" "),n("li",[n("code",[_._v("migrations")]),_._v("存储数据库迁移脚本")]),_._v(" "),n("li",[_._v("单元测试编写在"),n("code",[_._v("tests")]),_._v("包中")]),_._v(" "),n("li",[n("code",[_._v("notes")]),_._v("存储学习笔记")]),_._v(" "),n("li",[n("code",[_._v("requirements.txt")]),_._v("列出项目所有依赖包")]),_._v(" "),n("li",[n("code",[_._v("config.py")]),_._v("存储配置")]),_._v(" "),n("li",[n("code",[_._v("manage.py")]),_._v("用于启动程序")])]),_._v(" "),n("p",[n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210315141411.png",alt:""}})]),_._v(" "),n("h2",{attrs:{id:"_7-2-配置选项"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-配置选项"}},[_._v("#")]),_._v(" 7.2 配置选项")]),_._v(" "),n("p",[_._v("程序开发需要设定多个配置， 如，开发、测试和生产环境使用不同的程序库 hello.py中使用简单的字典状结构进行配置，这里我们使用层次结构的配置类\nconfig.py")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nimport os")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nclass Config:\nSECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess'\nSQLALCHEMY_COMMIT_ON_TEARDOWN = True\nSQLALCHEMY_TRACK_MODIFICATIONS = True\nFLASKY_MAIL_SUBJECT_PREFIX = '[Flasky]'\nFLASKY_MAIL_SENDER = os.environ.get('FLASKY_MAIL_SENDER')\nFLASKY_ADMIN = os.environ.get('FLASKY_ADMIN')")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    @staticmethod  # 返回函数的静态方法，静态方法可直接使用，如Config.init_app()，不需要实例化\n    def init_app(app):  # 自定义的一个初始化方法\n        pass\n")])])]),n("p",[_._v("​"),n("br"),_._v("\nclass DevelopmentConfig(Config):\nDEBUG = True\nMAIL_SERVER = 'smtp.sina.com'\nMAIL_PORT = 25\nMAIL_USERNAME = os.environ.get('MAIL_USERNAME')\nMAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')\nSQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URI')")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nclass TestingConfig(Config):\nTESTING = True\nSQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URI')")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nclass ProductionConfig(Config):\nSQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URI')")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nconfig = {\n'development': DevelopmentConfig,\n'testing': TestingConfig,\n'production': ProductionConfig,")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    'default': DevelopmentConfig\n}\n")])])]),n("p",[_._v("​"),n("br"),_._v("\n​"),n("br"),_._v("\n​")]),_._v(" "),n("p",[_._v("说明：")]),_._v(" "),n("ul",[n("li",[_._v("基类Config中包含通用配置，子类分别定义专用的配置")]),_._v(" "),n("li",[_._v("定义了三个子类，分别用于开发、测试和生产环境，而且指定了不同的数据库")]),_._v(" "),n("li",[_._v("init_app()方法，参数是程序实例，用于执行对当前环境的配置初始化")]),_._v(" "),n("li",[_._v("程序末尾，config字典中注册了不同的配置环境，默认为开发环境")])]),_._v(" "),n("h2",{attrs:{id:"_7-3-程序包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-程序包"}},[_._v("#")]),_._v(" 7.3 程序包")]),_._v(" "),n("p",[_._v("指被制作成包的app文件夹")]),_._v(" "),n("h3",{attrs:{id:"_7-3-1-使用程序工厂函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-1-使用程序工厂函数"}},[_._v("#")]),_._v(" 7.3.1 使用程序工厂函数")]),_._v(" "),n("p",[n("strong",[_._v("需求：")])]),_._v(" "),n("ul",[n("li",[_._v("单文件结构的缺点，由于程序在全局作用域中创建，所以无法动态修改 "),n("strong",[_._v("配置")]),_._v(" 。")]),_._v(" "),n("li",[_._v("有时为了提高测试的覆盖度，必须在不同的 "),n("strong",[_._v("配置")]),_._v(" 环境中运行程序")])]),_._v(" "),n("p",[n("strong",[_._v("解决：")]),_._v(" 使用工厂函数")]),_._v(" "),n("ul",[n("li",[_._v("工厂函数"),n("code",[_._v("create_app()")]),_._v("以配置的名称作为输入参数，故可动态修改配置")]),_._v(" "),n("li",[_._v("程序创建并配置好后，进行初始化扩展")]),_._v(" "),n("li",[_._v("返回创建的程序实例")])]),_._v(" "),n("p",[n("code",[_._v("app/__init__.py:")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n​"),n("br"),_._v("\nfrom flask import Flask\nfrom flask_bootstrap import Bootstrap\nfrom flask_moment import Moment\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_mail import Mail")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("from config import config\n\nbootstrap = Bootstrap()\nmoment = Moment()\ndb = SQLAlchemy()\nmail = Mail()\n")])])]),n("p",[_._v("​"),n("br"),_._v("\ndef create_app(config_name):\napp = Flask("),n("strong",[_._v("name")]),_._v(")\napp.config.from_object(config[config_name])  # 指定配置类的名称development/testing/production,默认是development\nconfig[config_name].init_app(app)            # 初始化扩展")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    bootstrap.init_app(app)                      # 初始化扩展\n    mail.init_app(app)\n    moment.init_app(app)\n    db.init_app(app)\n\n    from .main import main as main_blueprint    # 导入名称为main的蓝本\n    app.register_blueprint(main_blueprint)      # 将蓝本注册到程序\n\n    return app\n")])])]),n("p",[_._v("​"),n("br"),_._v("\n​")]),_._v(" "),n("h3",{attrs:{id:"_7-3-2-在蓝本中实现程序功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-2-在蓝本中实现程序功能"}},[_._v("#")]),_._v(" 7.3.2 在蓝本中实现程序功能")]),_._v(" "),n("p",[n("strong",[_._v("需求：")])]),_._v(" "),n("ul",[n("li",[_._v("单脚本程序中，程序实例存在于全局作用域中，路由直接使用"),n("code",[_._v("app.route")]),_._v("修饰器定义")]),_._v(" "),n("li",[_._v("现在程序在运行时创建实例，只有调用"),n("code",[_._v("create_app()")]),_._v("之后才能使用"),n("code",[_._v("app.route")]),_._v("修饰器")])]),_._v(" "),n("p",[n("strong",[_._v("解决：")]),_._v(" 蓝本"),n("code",[_._v("Blueprint")])]),_._v(" "),n("ul",[n("li",[_._v("蓝本中定义的路由处于休眠状态，直到蓝本注册到程序上后，路由才被激活")]),_._v(" "),n("li",[_._v("在"),n("code",[_._v("app")]),_._v("包中创建子包"),n("code",[_._v("main")]),_._v("，用于保存蓝本")])]),_._v(" "),n("p",[n("code",[_._v("app/main/__init__.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nfrom flask import Blueprint")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("main = Blueprint('main', __name__)  # param 1：蓝本的名字，param 2：蓝本所在的包或模块\n\nfrom . import views, errors\n")])])]),n("p",[_._v("此处使用"),n("code",[_._v("from . import views, errors")]),_._v("，将路由和错误的处理程序与蓝本关联起来 "),n("code",[_._v("app/__init__.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n​"),n("br"),_._v("\ndef create_app(config_name):\n# ...")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    from .main import main as main_blueprint    # 导入名称为main的蓝本\n    app.register_blueprint(main_blueprint)      # 将蓝本注册到程序\n\n    return app\n")])])]),n("p",[n("code",[_._v("app/main/views.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nfrom datetime import datetime\nfrom flask import render_template, session, redirect, url_for, flash, current_app")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("from . import main\nfrom .forms import NameForm\nfrom .. import db\nfrom ..models import User\nfrom ..email import send_email\n")])])]),n("p",[_._v("​"),n("br"),_._v("\n@main.route('/', methods=['GET', 'POST'])\ndef index():\nform = NameForm()\nif form.validate_on_submit():")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("        user = User.query.filter_by(username=form.name.data).first()\n        if user is None:\n            user = User(username=form.name.data)\n            db.session.add(user)\n            session['known'] = False\n            if current_app.config['FLASKY_ADMIN']:                                                      # 发送邮件\n                send_email(current_app.config['FLASKY_ADMIN'], 'New User', 'mail/new_user', user=user)  # 使用mail文件夹下的new_user模板\n        else:\n            session['known'] = True\n\n        old_name = session.get('name')\n        if old_name is not None and old_name != form.name.data:\n            flash(\"姓名已修改！\")\n        session['name'] = form.name.data\n        form.name.data = ''\n        return redirect(url_for('.index'))\n    return render_template('index.html', form=form, name=session.get('name'), known=session.get('known', False),\n                           current_time=datetime.utcnow())\n")])])]),n("p",[_._v("​")]),_._v(" "),n("p",[_._v("路由修饰器，由蓝本"),n("code",[_._v("main")]),_._v("提供，"),n("code",[_._v("url_for()")]),_._v("参数为路由的端点名，但是在蓝本中，Flask会为蓝本中的全部端点加上一个命名空间，这样就可以在不同的蓝本中使用相同的端点定义视图函数，所以视图函数index()注册的端点名是main.index，所以应该写成"),n("code",[_._v("url_for('main.index')")]),_._v("或是简写为"),n("code",[_._v("url_for(''.index')")]),_._v(" "),n("code",[_._v("app/main/errors.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nfrom flask import render_template\nfrom . import main")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n@main.app_errorhandler(404)\ndef page_not_found(e):\nreturn render_template('404.html')")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n@main.app_errorhandler(500)\ndef page_not_found(e):\nreturn render_template('500.html')")]),_._v(" "),n("p",[_._v("​")]),_._v(" "),n("p",[_._v("导入蓝本"),n("code",[_._v("from . import main")]),_._v("，使用"),n("code",[_._v("app_errorhandler")]),_._v("注册程序全局的错误处理程序 "),n("code",[_._v("app/main/forms.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, SubmitField\nfrom wtforms.validators import DataRequired")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nclass NameForm(FlaskForm):\nname = StringField('请输入你的名字：', validators=[DataRequired()])\nsubmit = SubmitField('提交')")]),_._v(" "),n("p",[_._v("​")]),_._v(" "),n("h2",{attrs:{id:"_7-4-启动脚本"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-启动脚本"}},[_._v("#")]),_._v(" 7.4 启动脚本")]),_._v(" "),n("p",[_._v("manage.py")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n​"),n("br"),_._v("\nfrom app import create_app, db\nfrom app.models import User, Role\nfrom flask_script import Manager, Shell\nfrom flask_migrate import Migrate, MigrateCommand")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("import pymysql\npymysql.install_as_MySQLdb()\n\napp = create_app('default')  # 设定开发环境\nmanager = Manager(app)\nmigrate = Migrate(app, db)\n")])])]),n("p",[_._v("​"),n("br"),_._v("\ndef make_shell_context():\nreturn dict(app=app, db=db, User=User, Role=Role)")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nmanager.add_command('db', MigrateCommand)\nmanager.add_command(\"shell\", Shell(make_context=make_shell_context))")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("if __name__ == '__main__':\n    manager.run()\n")])])]),n("p",[_._v("​")]),_._v(" "),n("p",[_._v("在PyCharm中设置运行的"),n("code",[_._v("环境变量")]),_._v("和"),n("code",[_._v("参数")]),_._v("，在运行程序之前，要先创建数据库")]),_._v(" "),n("h2",{attrs:{id:"_7-5-需求文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-需求文件"}},[_._v("#")]),_._v(" 7.5 需求文件")]),_._v(" "),n("ul",[n("li",[n("p",[_._v("pip")]),_._v(" "),n("ul",[n("li",[n("p",[_._v("导出")]),_._v(" "),n("p",[_._v("pip freeze > requirements.txt")])]),_._v(" "),n("li",[n("p",[_._v("安装")]),_._v(" "),n("p",[_._v("pip install -r requirements.txt")])])])]),_._v(" "),n("li",[n("p",[_._v("conda")]),_._v(" "),n("ul",[n("li",[n("p",[_._v("导出")]),_._v(" "),n("p",[_._v("conda list -e > requirements.txt")])]),_._v(" "),n("li",[n("p",[_._v("安装")]),_._v(" "),n("p",[_._v("conda install --yes --file requirements.txt")])])])])]),_._v(" "),n("h2",{attrs:{id:"_7-6-单元测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-单元测试"}},[_._v("#")]),_._v(" 7.6 单元测试")]),_._v(" "),n("p",[n("code",[_._v("setUp()")]),_._v("和"),n("code",[_._v("tearDown()")]),_._v("分别在测试前后运行，并且名字以"),n("code",[_._v("test_")]),_._v("开头的函数都作为测试执行\n第一个测试确保程序实例存在，第二个测试确保在测试配置中运行 将tests作为包使用，故在tests文件夹下新建"),n("code",[_._v("__init__.py")]),_._v("文件，内容可以为空\n"),n("code",[_._v("tests/test_basics.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n​"),n("br"),_._v("\nimport unittest\nfrom flask import current_app\nfrom app import create_app, db")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nclass BasicsTestCase(unittest.TestCase):\ndef setUp(self):\nself.app = create_app('testing')\nself.app_context = self.app.app_context()\nself.app_context.push()\ndb.create_all()")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    def tearDown(self):\n        db.session.remove()\n        db.drop_all()\n        self.app_context.pop()\n\n    def test_app_exists(self):\n        self.assertFalse(current_app is None)\n\n    def test_app_is_testing(self):\n        self.assertTrue(current_app.config['TESTING'])\n")])])]),n("p",[_._v("​")]),_._v(" "),n("p",[n("code",[_._v("manage.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\n@manager.command\ndef test():\nimport unittest\ntests = unittest.TestLoader().discover('tests')  # tests包\nunittest.TextTestRunner(verbosity=2).run(tests)")]),_._v(" "),n("p",[_._v("使用"),n("code",[_._v("python manage.py test")]),_._v("命令进行测试 如果在PyCharm中运行脚本，记得修改运行参数为"),n("code",[_._v("test")]),_._v("，效果如下：\n"),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210315152056.png",alt:""}})]),_._v(" "),n("h2",{attrs:{id:"_7-7-创建数据库和运行项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-创建数据库和运行项目"}},[_._v("#")]),_._v(" 7.7 创建数据库和运行项目")]),_._v(" "),n("p",[n("strong",[_._v("提醒：")]),_._v(" 程序运行之前要设置好环境变量")]),_._v(" "),n("ol",[n("li",[_._v("在PyCharm中设置好环境变量，运行参数设置为"),n("code",[_._v("shell")]),_._v("，运行"),n("code",[_._v("manage.py")])]),_._v(" "),n("li",[_._v("在出现的shell窗口中，输入"),n("code",[_._v("db.create_all()")]),_._v("创建表，然后可进行插入数据等操作，")]),_._v(" "),n("li",[_._v("数据库操作完成后，修改PyCharm的运行参数为"),n("code",[_._v("runserver")]),_._v("，运行"),n("code",[_._v("manage.py")])]),_._v(" "),n("li",[_._v("此时项目效果和之前的单脚本程序的效果一致")])]),_._v(" "),n("p",[_._v("对于创建数据表或者升级到最新修订版本，可使用下述命令")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\npython manage.py db upgrade")]),_._v(" "),n("p",[_._v("建议在PyCharm的运行参数设置中，修改为"),n("code",[_._v("db upgrade")]),_._v("，然后运行，运行时，之前设置的环境变量也都会被一同设置。")]),_._v(" "),n("h2",{attrs:{id:"_7-8-知识补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-知识补充"}},[_._v("#")]),_._v(" 7.8 知识补充")]),_._v(" "),n("ol",[n("li",[_._v("app包中的"),n("code",[_._v("__init__.py")]),_._v("文件")])]),_._v(" "),n("ul",[n("li",[n("code",[_._v("__init__.py")]),_._v("文件用于组织包（package）")]),_._v(" "),n("li",[_._v("包（package）的概念：简单来说，包是含有python模块的文件夹")]),_._v(" "),n("li",[_._v("一个python模块（module）为一个py文件，里面写有函数和类。包（package）是为了更好的管理模块（module）,相当于多个模块的父节点。")]),_._v(" "),n("li",[_._v("当文件夹下有"),n("code",[_._v("__init__.py")]),_._v("时，表示当前文件夹是一个package，其下的多个module统一构成一个整体。这些module都可以通过同一个package引入代码中。")])]),_._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[n("code",[_._v("init_app()")]),_._v("函数")])]),_._v(" "),n("p",[_._v("config.py")]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\nclass Config:\nSECRET_KEY = os.environ.get('SECRET_KEY') or 'hard to guess'\nSQLALCHEMY_COMMIT_ON_TEARDOWN = True\nSQLALCHEMY_TRACK_MODIFICATIONS = True\nFLASKY_MAIL_SUBJECT_PREFIX = '[Flasky]'\nFLASKY_MAIL_SENDER = os.environ.get('FLASKY_MAIL_SENDER')\nFLASKY_ADMIN = os.environ.get('FLASKY_ADMIN')")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    @staticmethod  # 返回函数的静态方法，静态方法可直接使用，如Config.init_app()，不需要实例化\n    def init_app(app):  # 自定义的一个初始化方法\n        pass\n")])])]),n("p",[_._v("Config类中自定义一个"),n("code",[_._v("init_app()")]),_._v("方法， "),n("code",[_._v("app/__init__.py")])]),_._v(" "),n("p",[_._v("​"),n("br"),_._v("\ndef create_app(config_name):\napp = Flask("),n("strong",[_._v("name")]),_._v(")\napp.config.from_object(config[config_name])  # 指定配置类的名称development/testing/production,默认是development\nconfig[config_name].init_app(app)            # 初始化扩展")]),_._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[_._v("    bootstrap.init_app(app)\n    mail.init_app(app)\n    moment.init_app(app)\n    db.init_app(app)\n")])])]),n("p",[_._v("类似于"),n("code",[_._v("bootstrap.init_app(app)")]),_._v("这种的"),n("code",[_._v("init_app()")]),_._v("函数都是类似于"),n("code",[_._v("bootstrap")]),_._v("这些程序实例，其对应的类中都定义了"),n("code",[_._v("init_app()")]),_._v("这个方法，用于执行对当前环境的配置初始化")])])}),[],!1,null,null,null);e.default=t.exports}}]);