(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{606:function(e,n,t){"use strict";t.r(n);var i=t(7),a=Object(i.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("ul",[t("li",[e._v("封装：用于包装数据属性和动作方法")]),e._v(" "),t("li",[e._v("继承：用于派生并扩展已有类型")]),e._v(" "),t("li",[e._v("多态：用于父类和子类之间类型转换与类型检查")])]),e._v(" "),t("h2",{attrs:{id:"类的封装"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的封装"}},[e._v("#")]),e._v(" 类的封装")]),e._v(" "),t("p",[e._v("类：既包含数据又包含动作的结构体")]),e._v(" "),t("ul",[t("li",[e._v("成员属性：保存数据")]),e._v(" "),t("li",[e._v("成员方法：表达动作")]),e._v(" "),t("li",[e._v("构造方法：初始化操作")])]),e._v(" "),t("ol",[t("li",[t("p",[e._v("类的成员定义")]),e._v(" "),t("ol",[t("li",[e._v("机器语言\n2. 汇编语言（低级语言）：归纳常见操作\n3. C语言（中级语言）：把基本数据类型分门别类\n4. C++（高级语言）：提供了全新的类class意图代替结构体struct\n5. Java（高级语言）：保留面向对象的精髓，去掉了繁琐的指针操作")])]),e._v(" "),t("p",[e._v("// 演示类的封装，对成员属性和成员方法的定义")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('package com.jiangsu.nanjing;\n\npublic class OrangeMember {\n   private String name;\n   private double weight;\n   private boolean isRipe;\n   private String place;\n\n   public void setPlace(String place){\n       this.place = place;\n       this.name = (this.place.equals("淮北"))?"枳子":"橘子";\n   }\n\n   public String getPlace(){\n       return this.place;\n   }\n\n   public void setName(String name){\n       this.name = name;\n   }\n\n   public String getName(){\n       return this.name;\n   }\n\n   public void setWeight(double weight){\n       this.weight = weight;\n   }\n\n   public double getWeight(){\n       return this.weight;\n   }\n\n   public void setRipe(boolean isRipe){\n       this.isRipe = isRipe;\n   }\n\n   public boolean getRipe(){\n       return this.isRipe;\n   }\n\n   public String toString(){\n       String desc = String.format("这个%s的重量是%s克，%s成熟，产地是%s。",\n               this.name, this.weight, this.isRipe?"已":"未", this.place);\n       return desc;\n   }\n}\n')])])]),t("p",[e._v("​"),t("br"),e._v("\n​"),t("br"),e._v("\n//调用实例的成员进行操作\npackage com.jiangsu.nanjing;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class Test7 {\n   public static void main(String[] args){\n       testMember();\n   }\n\n   private static void testMember(){\n       OrangeMember orange = new OrangeMember();\n       orange.setName("橘子");\n       orange.setPlace("淮南");\n       orange.setRipe(true);\n       orange.setWeight(200);\n       System.out.println(orange.toString());\n   }\n\n}\n')])])]),t("p",[e._v("​")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("类的构造方法 类名称的后面为什么能够直接跟着圆括号？")]),e._v(" "),t("p",[e._v("OrangeMember orange = new OrangeMember();")])])]),e._v(" "),t("p",[e._v("因为类型的定义，除了成员属性和成员方法外，还有一种构造方法，其用途是构建并返回该类的实例，而且Java在编译时通常会自动补上默认的构造方法，如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("    public OrangeMember (){\n\n}\n")])])]),t("p",[e._v("构造方法也可以自行定义，如：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('    public orangeConstruct(String inputplace){\n   palce = inputPlace;\n   name = (place.equals("淮北"))?"枳子":"橘子"\n}\n\nprivate static void testConstruct(){\n   OrangeConstruct orange = new OrangeConstruct("淮北");\n}\n')])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[e._v("this关键字的用法 用于指代当前类自身，通常用来修改成员属性，也可以修饰成员方法（类内部调用成员方法通常不嫁关键字this），举例：")]),e._v(" "),t("p",[e._v("private double weight;")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("public void setWeight(double weight){\n   this.weight = weight;\n}\n")])])]),t("h2",{attrs:{id:"类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的继承"}},[e._v("#")]),e._v(" 类的继承")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("类的简单继承")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("定义小类时不必另起炉灶，完全可以基于大类然后修修补补形成新的小类定义")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("这种小类基于大类的关系在面向对象的体系中被称作“继承”")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[e._v("大类叫做【基类】，基于大类的小类叫做【派生类】")]),e._v(" "),t("ol",{attrs:{start:"4"}},[t("li",[t("p",[e._v("Java中表示继承关系的关键字是"),t("code",[e._v("extends")])]),e._v(" "),t("ol",{attrs:{start:"5"}},[t("li",[t("code",[e._v("class B extends A")]),e._v("表示A类派生出B类，即B类继承了A类")])])])])])]),e._v(" "),t("p",[e._v("public class Swallow extends Bird{")])])])])]),e._v(" "),t("p",[e._v("}")])]),e._v(" "),t("li",[t("p",[e._v("关键字"),t("code",[e._v("super")]),e._v("的用法")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("super")]),e._v("关键字可在子类中引用父类的成员")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("派生类只继承基类的默认构造方法，没有自动继承带参数的构造方法")]),e._v(" "),t("p",[e._v("public class Eagle extends Bird{\npublic Eagle(String name, int sexType, String voice){\nsuper(name, sexType, voice);\n}\n}")])])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("super")]),e._v("指代父类的名称，"),t("code",[e._v("super(name, sexType, voice);")]),e._v("表示"),t("code",[e._v("Bird(name, sexType, voice);")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("super")]),e._v("表示父类，"),t("code",[e._v("this")]),e._v("表示本类")])]),e._v(" "),t("li",[t("p",[e._v("若想对父类的属性直接赋值，则考虑把父类的属性从"),t("code",[e._v("private")]),e._v("改为"),t("code",[e._v("public")])])]),e._v(" "),t("li",[t("p",[e._v("Java对于同名属性的判断优先级有如下规则：")])])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v("* 若方法内部存在同名的输入参数，则该字段名称默认代表输入参数\n* 若方法内部不存在同名的输入参数，则该字段名称默认代表本类的成员属性\n* 若方法内部不存在同名的输入参数，且本类也未定义同名的成员属性，则该字段名称只能代表父类的成员属性\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[e._v("几种开放性修饰符")]),e._v(" "),t("ol",[t("li",[e._v("public：公共的，允许所有人访问\n2. private：私有的，只有自身可以访问\n3. protected：收保护的，允许本家族访问，包括自身及其子类\n4. 无修饰符：友好的，允许当地人访问，对同一个包下面的类很友好")])])]),e._v(" "),t("li",[t("p",[e._v("继承的示例")]),e._v(" "),t("p",[e._v("// 基类")])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('package com.jiangsu.nanjing;\n\npublic class Bird {\n   private String name;\n   private String voice;\n   private int sexType;\n   protected String sexName;\n\n   public Bird(String name, int sexType, String voice){\n       this.name = name;\n       this.voice = voice;\n       setSexType(sexType);\n\n   }\n\n   public void setName(String name){\n       this.name = name;\n   }\n\n   public String getName(){\n       return this.name;\n   }\n\n   public void setVoice(String voice){\n       this.voice = voice;\n   }\n\n   public String getVoice(){\n       return this.voice;\n   }\n\n   public void setSexType(int sexType){\n       this.sexType = sexType;\n       this.sexName = (sexType==0)?"雄":"雌";\n   }\n\n   public int getSexType(){\n       return this.sexType;\n   }\n\n   public String getSexName(){\n       return this.sexName;\n   }\n\n   public String toString(){\n       String desc = String.format("这是一只%s%s，它会%3$s、%3$s地叫", this.sexName, this.name, this.voice);\n       return desc;\n   }\n}\n')])])]),t("p",[e._v("​"),t("br"),e._v("\n​"),t("br"),e._v("\n// 派生类\npackage com.jiangsu.nanjing;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class DuckProtected extends Bird {\n   public DuckProtected(String name, int sex){\n       super(name, sex, "嘎嘎");  // 继承父类的构造方法\n   }\n   public void setSexType(int sexType){\n       super.setSexType(sexType); // 继承父类的方法\n       sexName = (sexType==0)?"公":"母"; // 重写该方法\n   }\n}\n')])])]),t("p",[e._v("​"),t("br"),e._v("\n​"),t("br"),e._v("\n// 测试\npackage com.jiangsu.nanjing;")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v('public class Test7 {\n   public static void main(String[] args){\n       testMember();\n   }\n\n   private static void testMember(){\n//        Bird pigeon = new Bird("鸽子", 1, "咕咕");\n//        System.out.println(pigeon.toString());\n\n       DuckProtected duck = new DuckProtected("鸭子", 1);\n       System.out.println(duck.toString());\n   }\n\n}\n')])])]),t("p",[e._v("​")]),e._v(" "),t("h2",{attrs:{id:"类的多态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类的多态"}},[e._v("#")]),e._v(" 类的多态")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("多态发生场景")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("多态：多种状态，多态的实现依赖于继承")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("引入多态的好处：只要某些类型都从同一个父类派生而来，就能在方法内部把它们当做同一种类型来处理，而无须区分具体的类型。")]),e._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[e._v("举例")])]),e._v(" "),t("p",[e._v("public static void call(Chicken chicken){\nchicken.call();\n}")]),e._v(" "),t("p",[e._v("call(new Cock());\ncall(new Hen());")])])])])])]),e._v(" "),t("li",[t("p",[e._v("对象的类型检查")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("通过类的属性字段来检查")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("通过实例类型来鉴别")]),e._v(" "),t("p",[e._v("chicken.getClass().equals(Cock.class)")])])])]),e._v(" "),t("li",[t("p",[e._v("使用关键字"),t("code",[e._v("instanceof")]),e._v("来鉴别实例类型")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" chicken instanceof Cock\n")])])])])])]),e._v(" "),t("li",[t("p",[e._v("终态：关键字"),t("code",[e._v("final")]),e._v("的用法 "),t("strong",[e._v("维护某个实体的纯洁性，不允许外部肆意篡改该实体。")])]),e._v(" "),t("ol",[t("li",[t("p",[e._v("一旦某个类被final修饰，则该类无法再派生出任何子类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" final public class Chick(){\n")])])])])]),e._v(" "),t("p",[e._v("}")]),e._v(" "),t("ol",{attrs:{start:"2"}},[t("li",[t("p",[e._v("一旦某个成员属性被final修饰，则该属性不能再次赋值")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" public final int MALE = 0;\n")])])])]),e._v(" "),t("li",[t("p",[e._v("一旦某个成员方法被final修饰，则该方法禁止被子类重写")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" public final boolean canSwim(){\n")])])])])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[e._v(" return false;\n")])])]),t("p",[e._v("}")])])]),e._v(" "),t("h2",{attrs:{id:"娱乐一下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#娱乐一下"}},[e._v("#")]),e._v(" 娱乐一下")]),e._v(" "),t("p",[e._v("有一种职业叫做“小鸡性别鉴定师”，年薪高达4万英镑（折合人民币40万左右）")])])}),[],!1,null,null,null);n.default=a.exports}}]);