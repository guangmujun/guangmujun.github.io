(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{628:function(_,t,r){"use strict";r.r(t);var e=r(7),a=Object(e.a)({},(function(){var _=this,t=_.$createElement,r=_._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[r("h2",{attrs:{id:"视图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#视图"}},[_._v("#")]),_._v(" 视图")]),_._v(" "),r("h3",{attrs:{id:"视图的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#视图的定义"}},[_._v("#")]),_._v(" 视图的定义")]),_._v(" "),r("p",[_._v("操作视图时会根据创建视图的SELECT语句生成一张虚拟表，然后在这张虚拟表上做SQL操作")]),_._v(" "),r("h3",{attrs:{id:"视图的评价"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#视图的评价"}},[_._v("#")]),_._v(" 视图的评价")]),_._v(" "),r("ul",[r("li",[_._v("将频繁使用的SELECT语句保存")]),_._v(" "),r("li",[_._v("不对外公开数据表全部字段，增强数据的保密性")]),_._v(" "),r("li",[_._v("降低数据的冗余")]),_._v(" "),r("li",[_._v("多重视图会降低SQL的性能")])]),_._v(" "),r("h3",{attrs:{id:"视图的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#视图的使用"}},[_._v("#")]),_._v(" 视图的使用")]),_._v(" "),r("h4",{attrs:{id:"创建视图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建视图"}},[_._v("#")]),_._v(" 创建视图")]),_._v(" "),r("ol",[r("li",[_._v("基于单表的视图")])]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nCREATE VIEW productsum(product_type, cnt_product)\nAS\nSELECT product_type, COUNT(*)\nFROM product\nGROUP BY product_type;")]),_._v(" "),r("ol",{attrs:{start:"2"}},[r("li",[_._v("基于多表的视图")])]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nCREATE VIEW view_shop_product(product_type, sale_price, shop_name)\nAS\nSELECT product_type, sale_price, shop_name\nFrom product, shop_product\nWHERE product.product_id = shop_product.product_id;")]),_._v(" "),r("ol",{attrs:{start:"3"}},[r("li",[_._v("基于视图的查询")])]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT sale_price, shop_name\nFROM view_shop_product\nWHERE product_type = '衣服';")]),_._v(" "),r("h4",{attrs:{id:"修改视图结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#修改视图结构"}},[_._v("#")]),_._v(" 修改视图结构")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nALTER VIEW productsum\nAS\nSELECT product_type, sale_price\nFROM product\nWHERE regist_data > '2019-09-11';")]),_._v(" "),r("h4",{attrs:{id:"更新视图内容"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#更新视图内容"}},[_._v("#")]),_._v(" 更新视图内容")]),_._v(" "),r("p",[_._v("尽量不要通过视图来更新原来的表")]),_._v(" "),r("h4",{attrs:{id:"删除视图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#删除视图"}},[_._v("#")]),_._v(" 删除视图")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nDROP VIEW productsum;")]),_._v(" "),r("h3",{attrs:{id:"视图的补充"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#视图的补充"}},[_._v("#")]),_._v(" 视图的补充")]),_._v(" "),r("p",[_._v("多数DBMS中定义视图时不能使用ORDER BY语句，但是MySQL中视图的定义是允许使用的。")]),_._v(" "),r("h2",{attrs:{id:"子查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子查询"}},[_._v("#")]),_._v(" 子查询")]),_._v(" "),r("h3",{attrs:{id:"子查询的定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子查询的定义"}},[_._v("#")]),_._v(" 子查询的定义")]),_._v(" "),r("p",[_._v("一个查询语句嵌套在另一个查询语句内部的查询。")]),_._v(" "),r("h3",{attrs:{id:"和视图的关系"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#和视图的关系"}},[_._v("#")]),_._v(" 和视图的关系")]),_._v(" "),r("ul",[r("li",[r("p",[_._v("子查询就是将用来定义视图的SELECT语句直接用于FROM子句当中。")])]),_._v(" "),r("li",[r("p",[_._v("子查询是一次性的，不会像视图那样保存在存储介质中，语句执行之后就消失")])])]),_._v(" "),r("h3",{attrs:{id:"子查询的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#子查询的使用"}},[_._v("#")]),_._v(" 子查询的使用")]),_._v(" "),r("h4",{attrs:{id:"基础用法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础用法"}},[_._v("#")]),_._v(" 基础用法")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT stu_name\nFROM(\nSELECT stu_name, COUNT(*) AS stu_cnt\nFROM students_info\nGROUP BY stu_age) AS studentSum;")]),_._v(" "),r("h4",{attrs:{id:"标量子查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#标量子查询"}},[_._v("#")]),_._v(" 标量子查询")]),_._v(" "),r("p",[_._v("查询结果只能是表中具体的某一行的某一列。 故其在使用单一值的位置都可以使用。")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_id, product_name, sale_price\nFROM product\nWHERE sale_price > (SELECT AVG(sale_price) FROM product);")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\n​"),r("br"),_._v("\nSELECT product_id, product_name, sale_price,\n(SELECT AVG(sale_price) FROM product) AS avg_price\nFROM product;")]),_._v(" "),r("h4",{attrs:{id:"关联子查询"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#关联子查询"}},[_._v("#")]),_._v(" 关联子查询")]),_._v(" "),r("p",[_._v("关联子查询的逻辑和常规逻辑有所不同，详细可参考这篇"),r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/41844742",target:"_blank",rel:"noopener noreferrer"}},[_._v("文章"),r("OutboundLink")],1),_._v("\n示例：查询出销售单价高于平均销售单价的商品")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_type, product_name, sale_price\nFROM product AS p1\nWHERE sale_price > (SELECT AVG (sale_price)\nFROM product AS p2\nWHERE p1.product_type = p2.product_type\nGROUP BY product_type);")]),_._v(" "),r("p",[_._v("执行逻辑：")]),_._v(" "),r("ul",[r("li",[_._v("先从主查询的product表中的product_type列取出第一个值，进入子查询中，替换"),r("code",[_._v("p1.product_type")]),_._v("，得到子查询结果，然后返回父查询，判断父查询的WHERE子句条件，然后返回整个语句的第一个结果。")]),_._v(" "),r("li",[_._v("重复上述操作，知道所有主查询中的product表中国的product_type列记录取完位置，最终得出所有的查询结果。")])]),_._v(" "),r("h2",{attrs:{id:"练习题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#练习题"}},[_._v("#")]),_._v(" 练习题")]),_._v(" "),r("p",[r("strong",[_._v("3.1")]),_._v(" 创建出满足下述三个条件的视图（视图名称为 ViewPractice5_1）。使用 product（商品）表作为参照表，假设表中包含初始状态的\n8 行数据。")]),_._v(" "),r("ul",[r("li",[_._v("条件 1：销售单价大于等于 1000 日元。")]),_._v(" "),r("li",[_._v("条件 2：登记日期是 2009 年 9 月 20 日。")]),_._v(" "),r("li",[_._v("条件 3：包含商品名称、销售单价和登记日期三列。")])]),_._v(" "),r("p",[_._v("对该视图执行 SELECT 语句的结果如下所示。")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT * FROM ViewPractice5_1;")]),_._v(" "),r("p",[_._v("执行结果")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nproduct_name | sale_price | regist_date\n--------------+------------+------------\nT恤衫         |   1000    | 2009-09-20\n菜刀          |    3000    | 2009-09-20")]),_._v(" "),r("p",[r("strong",[_._v("Answer:")])]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nCREATE VIEW ViewPractice5_1(product_name, sale_price, regist_date)\nAS\nSELECT product_name, sale_price, regist_date\nFROM product\nWHERE sale_price >= 1000 AND regist_data = '2009-09-20';")]),_._v(" "),r("p",[r("strong",[_._v("3.2")]),_._v(" 向习题一中创建的视图 ViewPractice5_1 中插入如下数据，会得到什么样的结果呢？")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nINSERT INTO ViewPractice5_1 VALUES (' 刀子 ', 300, '2009-11-02');")]),_._v(" "),r("p",[r("strong",[_._v("Answer:")]),_._v(" 视图数据更新，原表中部分数据更新，一般不这么操作。 "),r("strong",[_._v("3.3")]),_._v(" 请根据如下结果编写 SELECT 语句，其中\nsale_price_all 列为全部商品的平均销售单价。")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nproduct_id | product_name | product_type | sale_price | sale_price_all\n------------+-------------+--------------+------------+---------------------\n0001       | T恤衫         | 衣服         | 1000       | 2097.5000000000000000\n0002       | 打孔器        | 办公用品      | 500        | 2097.5000000000000000\n0003       | 运动T恤       | 衣服          | 4000      | 2097.5000000000000000\n0004       | 菜刀          | 厨房用具      | 3000       | 2097.5000000000000000\n0005       | 高压锅        | 厨房用具      | 6800       | 2097.5000000000000000\n0006       | 叉子          | 厨房用具      | 500        | 2097.5000000000000000\n0007       | 擦菜板        | 厨房用具       | 880       | 2097.5000000000000000\n0008       | 圆珠笔        | 办公用品       | 100       | 2097.5000000000000000")]),_._v(" "),r("p",[r("strong",[_._v("Answer:")])]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nCREATE VIEW productsum(product_id,product_name,\nproduct_type,sale_price,sale_price_all)\nAS\nSELECT product_id,product_name,\nproduct_type,sale_price,SUM(sale_price)\nFROM product;")]),_._v(" "),r("p",[r("strong",[_._v("3.4")]),_._v(" 请根据习题一中的条件编写一条 SQL 语句，创建一幅包含如下数据的视图（名称为AvgPriceByType）。")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nproduct_id | product_name | product_type | sale_price | avg_sale_price\n------------+-------------+--------------+------------+---------------------\n0001       | T恤衫         | 衣服         | 1000       |2500.0000000000000000\n0002       | 打孔器         | 办公用品     | 500        | 300.0000000000000000\n0003       | 运动T恤        | 衣服        | 4000        |2500.0000000000000000\n0004       | 菜刀          | 厨房用具      | 3000        |2795.0000000000000000\n0005       | 高压锅         | 厨房用具     | 6800        |2795.0000000000000000\n0006       | 叉子          | 厨房用具      | 500         |2795.0000000000000000\n0007       | 擦菜板         | 厨房用具     | 880         |2795.0000000000000000\n0008       | 圆珠笔         | 办公用品     | 100         | 300.0000000000000000")]),_._v(" "),r("p",[_._v("提示：其中的关键是 avg_sale_price 列。与习题三不同，这里需要计算出的 是各商品种类的平均销售单价。这与使用关联子查询所得到的结果相同。\n也就是说，该列可以使用关联子查询进行创建。问题就是应该在什么地方使用这个关联子查询。 "),r("strong",[_._v("Answer:")]),_._v("???")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nCREATE VIEW AvgPriceByType(product_id, product_name,"),r("br"),_._v("\nproduct_type, sale_price,avg_sale_price)\nAS\nSELECT product_id,product_name,\nproduct_type,sale_price,\n(SELECT AVG (sale_price)\nFROM product AS p2\nWHERE p1.product_type = p2.product_type)\nFROM product AS p1;")]),_._v(" "),r("h2",{attrs:{id:"函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[_._v("#")]),_._v(" 函数")]),_._v(" "),r("h3",{attrs:{id:"算数函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#算数函数"}},[_._v("#")]),_._v(" 算数函数")]),_._v(" "),r("ol",[r("li",[r("p",[_._v("ABS：绝对值 "),r("code",[_._v("ABS(数值)")])])]),_._v(" "),r("li",[r("p",[_._v("MOD：求余数 "),r("code",[_._v("MOD(被除数，除数)")])])]),_._v(" "),r("li",[r("p",[_._v("ROUND：四舍五入 "),r("code",[_._v("ROUND(对象数值，保留小数的位数)")])])])]),_._v(" "),r("h3",{attrs:{id:"字符串函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#字符串函数"}},[_._v("#")]),_._v(" 字符串函数")]),_._v(" "),r("ol",[r("li",[r("p",[_._v("CONCAT：拼接 "),r("code",[_._v("CONCAT(str1, str2, str3)")])])]),_._v(" "),r("li",[r("p",[_._v("LENGTH：字符串长度 "),r("code",[_._v("LENGTH(字符串)")])])]),_._v(" "),r("li",[r("p",[_._v("LOWER：小写转换")])]),_._v(" "),r("li",[r("p",[_._v("UPPER：大写转换")])]),_._v(" "),r("li",[r("p",[_._v("REPLACE：字符串替换 "),r("code",[_._v("REPLACE(对象字符串， 替换前的字符串， 替换后的字符串)")])])]),_._v(" "),r("li",[r("p",[_._v("SUBSTRING：字符串的截取 "),r("code",[_._v("SUBSTRING(对象字符串 FROM 截取的起始位置 FOR 截取的字符数)")])])]),_._v(" "),r("li",[r("p",[_._v("SUBSTRING_INDEX：字符串按索引截取 "),r("code",[_._v("SUBSTRING_INDEX(原始字符串，分隔符，n)")]),_._v(" 获取原始字符串按照分隔符分割后，第n个分隔符之前的子字符串，此时n为整数，如果n为负数，则是得到第|n|个分隔符之后的子字符串。")])])]),_._v(" "),r("h3",{attrs:{id:"日期函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#日期函数"}},[_._v("#")]),_._v(" 日期函数")]),_._v(" "),r("ol",[r("li",[r("p",[_._v("CURRENT_DATE：获取当前日期")])]),_._v(" "),r("li",[r("p",[_._v("CURRENT_TIME：获取当前时间")])]),_._v(" "),r("li",[r("p",[_._v("CURRENT_TIMESTAMP：获取当前日期和时间")])]),_._v(" "),r("li",[r("p",[_._v("EXTRACT：截取日期元素 "),r("code",[_._v("EXTRACT(日期元素 FROM 日期)")])]),_._v(" "),r("p",[_._v("SELECT CURRENT_TIMESTAMP as now,")])])]),_._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[_._v("EXTRACT(YEAR   FROM CURRENT_TIMESTAMP) AS year,\nEXTRACT(MONTH  FROM CURRENT_TIMESTAMP) AS month,\nEXTRACT(DAY    FROM CURRENT_TIMESTAMP) AS day,\nEXTRACT(HOUR   FROM CURRENT_TIMESTAMP) AS hour,\nEXTRACT(MINUTE FROM CURRENT_TIMESTAMP) AS MINute,\nEXTRACT(SECOND FROM CURRENT_TIMESTAMP) AS second;\n+---------------------+------+-------+------+------+--------+--------+\n| now                 | year | month | day  | hour | MINute | second |\n+---------------------+------+-------+------+------+--------+--------+\n| 2020-08-08 17:34:38 | 2020 |     8 |    8 |   17 |     34 |     38 |\n+---------------------+------+-------+------+------+--------+--------+\n1 row in set (0.00 sec)\n")])])]),r("h3",{attrs:{id:"转换函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#转换函数"}},[_._v("#")]),_._v(" 转换函数")]),_._v(" "),r("ul",[r("li",[_._v("数据类型转换")]),_._v(" "),r("li",[_._v("值的转换")])]),_._v(" "),r("ol",[r("li",[r("p",[_._v("CAST：类型转换 "),r("code",[_._v("CAST(转换前的值 AS 想要转化的数据类型)")])])]),_._v(" "),r("li",[r("p",[_._v("COALESCE：将NULL转换为其他值 "),r("code",[_._v("COALESCE(数据1，数据2，……)")]),_._v(" 返回左侧开始第一个不是NULL的值")])])]),_._v(" "),r("h2",{attrs:{id:"谓词"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#谓词"}},[_._v("#")]),_._v(" 谓词")]),_._v(" "),r("h3",{attrs:{id:"like"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#like"}},[_._v("#")]),_._v(" LIKE")]),_._v(" "),r("p",[_._v("用字符串的部分一致查询")]),_._v(" "),r("ul",[r("li",[_._v("前方一致：如"),r("code",[_._v("ddd%")])]),_._v(" "),r("li",[_._v("中间一致：如"),r("code",[_._v("%ddd%")]),_._v("，包含前方一致和后方一直的查询结果")]),_._v(" "),r("li",[_._v("后方一致：如"),r("code",[_._v("%ddd")])])]),_._v(" "),r("p",[_._v("示例：")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT *\nFROM samplelike\nWHERE strcol LIKE 'ddd%';")]),_._v(" "),r("h3",{attrs:{id:"between"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#between"}},[_._v("#")]),_._v(" BETWEEN")]),_._v(" "),r("p",[_._v("用于范围查询")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_name, sale_price\nFROM product\nWHERE sale_price BETWEEN 100 AND 1000;")]),_._v(" "),r("h3",{attrs:{id:"is-null"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#is-null"}},[_._v("#")]),_._v(" IS NULL")]),_._v(" "),r("p",[_._v("判断否为NULL，IS NULL， IS NOT NULL")]),_._v(" "),r("h3",{attrs:{id:"in"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#in"}},[_._v("#")]),_._v(" IN")]),_._v(" "),r("p",[_._v("可以替代多个"),r("code",[_._v("OR")])]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_name, purchase_price\nFROM product\nWHERE purchase_price IN (320, 500, 5000);")]),_._v(" "),r("p",[_._v("使用子查询作为IN谓语的参数")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_name, sale_price\nFROM product\nWHERE product_id IN (SELECT product_id\nFROM shopproduct\nWHERE shop_id = '000C');")]),_._v(" "),r("h3",{attrs:{id:"exist"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#exist"}},[_._v("#")]),_._v(" EXIST")]),_._v(" "),r("p",[r("strong",[_._v("判断是否存在满足某种条件的记录")]),_._v(" 在右侧书写 1 个参数，该参数通常都会是一个子查询。 EXIST 通常会使用关联子查询作为参数。 EXIST\n只关心记录是否存在. EXIST 只会判断是否存在满足子查询中 WHERE 子句指定的条件“商店编号（shop_id）为\n‘000C’，商品（product）表和商店")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_name, sale_price\nFROM product AS p\nWHERE EXISTS (SELECT *\nFROM shopproduct AS sp\nWHERE sp.shop_id = '000C'\nAND sp.product_id = p.product_id);\n+--------------+------------+\n| product_name | sale_price |\n+--------------+------------+\n| 运动T恤      |       4000 |\n| 菜刀         |       3000 |\n| 叉子         |        500 |\n| 擦菜板       |        880 |\n+--------------+------------+\n4 rows in set (0.00 sec)")]),_._v(" "),r("p",[_._v("NOT EXIST")]),_._v(" "),r("h3",{attrs:{id:"case表达式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#case表达式"}},[_._v("#")]),_._v(" CASE表达式")]),_._v(" "),r("h4",{attrs:{id:"基本定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本定义"}},[_._v("#")]),_._v(" 基本定义")]),_._v(" "),r("p",[_._v("CASE表达式的语法分为简单CASE表达式和搜索CASE表达式两种。由于搜索CASE表达式包含简单CASE表达式的全部功能。本课程将重点介绍搜索CASE表达式。\n语法：")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nCASE WHEN <求值表达式> THEN <表达式>\nWHEN <求值表达式> THEN <表达式>\nWHEN <求值表达式> THEN <表达式>\n.\n.\n.\nELSE <表达式>\nEND")]),_._v(" "),r("p",[_._v("上述语句执行时，依次判断 when 表达式是否为真值，是则执行 THEN 后的语句，如果所有的 when 表达式均为假，则执行 ELSE 后的语句。\n无论多么庞大的 CASE 表达式，最后也只会返回一个值。")]),_._v(" "),r("h4",{attrs:{id:"使用方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用方法"}},[_._v("#")]),_._v(" 使用方法")]),_._v(" "),r("ol",[r("li",[r("p",[_._v("根据不同分支得到不同列值")]),_._v(" "),r("p",[_._v("SELECT  product_name,\nCASE WHEN product_type = '衣服' THEN CONCAT('A ： ',product_type)\nWHEN product_type = '办公用品'  THEN CONCAT('B ： ',product_type)\nWHEN product_type = '厨房用具'  THEN CONCAT('C ： ',product_type)\nELSE NULL\nEND AS abc_product_type\nFROM  product;")])])]),_._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[_._v("+--------------+------------------+\n| product_name | abc_product_type |\n+--------------+------------------+\n| T恤          | A ： 衣服        |\n| 打孔器       | B ： 办公用品    |\n| 运动T恤      | A ： 衣服        |\n| 菜刀         | C ： 厨房用具    |\n| 高压锅       | C ： 厨房用具    |\n| 叉子         | C ： 厨房用具    |\n| 擦菜板       | C ： 厨房用具    |\n| 圆珠笔       | B ： 办公用品    |\n+--------------+------------------+\n8 rows in set (0.00 sec)\n")])])]),r("ol",{attrs:{start:"2"}},[r("li",[r("p",[_._v("列方向上的聚合")]),_._v(" "),r("p",[_._v("-- 对按照商品种类计算出的销售单价合计值进行行列转换")])])]),_._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[_._v("SELECT SUM(CASE WHEN product_type = '衣服' THEN sale_price ELSE 0 END) AS sum_price_clothes,\n      SUM(CASE WHEN product_type = '厨房用具' THEN sale_price ELSE 0 END) AS sum_price_kitchen,\n      SUM(CASE WHEN product_type = '办公用品' THEN sale_price ELSE 0 END) AS sum_price_office\n FROM product;\n+-------------------+-------------------+------------------+\n| sum_price_clothes | sum_price_kitchen | sum_price_office |\n+-------------------+-------------------+------------------+\n|              5000 |             11180 |              600 |\n+-------------------+-------------------+------------------+\n1 row in set (0.00 sec)\n")])])]),r("ol",{attrs:{start:"3"}},[r("li",[r("p",[_._v("实现行转列")]),_._v(" "),r("p",[_._v("-- CASE WHEN 实现数字列 score 行转列")])])]),_._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",[r("code",[_._v("SELECT name,\n      SUM(CASE WHEN subject = '语文' THEN score ELSE null END) as chinese,\n      SUM(CASE WHEN subject = '数学' THEN score ELSE null END) as math,\n      SUM(CASE WHEN subject = '外语' THEN score ELSE null END) as english\n FROM score\nGROUP BY name;\n+------+---------+------+---------+\n| name | chinese | math | english |\n+------+---------+------+---------+\n| 张三 |      93 |   88 |      91 |\n| 李四 |      87 |   90 |      77 |\n+------+---------+------+---------+\n2 rows in set (0.00 sec)\n")])])]),r("h2",{attrs:{id:"练习题-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#练习题-2"}},[_._v("#")]),_._v(" 练习题")]),_._v(" "),r("p",[r("strong",[_._v("3.5")]),_._v(" 运算或者函数中含有 NULL 时，结果全都会变为NULL ？（判断题）False "),r("strong",[_._v("3.6")]),_._v(" 对本章中使用的\nproduct（商品）表执行如下 2 条 SELECT 语句，能够得到什么样的结果呢？ ①商品进价不是500或2800或5000")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_name, purchase_price\nFROM product\nWHERE purchase_price NOT IN (500, 2800, 5000);")]),_._v(" "),r("p",[_._v("②商品进价不是500或2800或500或NULL")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nSELECT product_name, purchase_price\nFROM product\nWHERE purchase_price NOT IN (500, 2800, 5000, NULL);")]),_._v(" "),r("p",[r("strong",[_._v("3.7")]),_._v(" 按照销售单价（ sale_price）对练习 6.1 中的 product（商品）表中的商品进行如下分类。")]),_._v(" "),r("ul",[r("li",[_._v("低档商品：销售单价在1000日元以下（T恤衫、办公用品、叉子、擦菜板、 圆珠笔）")]),_._v(" "),r("li",[_._v("中档商品：销售单价在1001日元以上3000日元以下（菜刀）")]),_._v(" "),r("li",[_._v("高档商品：销售单价在3001日元以上（运动T恤、高压锅）")])]),_._v(" "),r("p",[_._v("请编写出统计上述商品种类中所包含的商品数量的 SELECT 语句，结果如下所示。 执行结果")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\nlow_price | mid_price | high_price\n----------+-----------+------------\n5 |         1 |         2")]),_._v(" "),r("p",[_._v("​"),r("br"),_._v("\n​"),r("br"),_._v("\nSELECT\nCOUNT\n(CASE WHEN sale_price < 1000 THEN DISTINCT product_type ELSE 0 END)\nAS low_price,\nCOUNT\n(CASE WHEN sale_price BETWEEN 1000 AND 3000 THEN DISTINCT product_type ELSE 0 END)\nAS mid_price,\nCOUNT\n(CASE WHEN sale_price > 3000 THEN DISTINCT product_type ELSE 0 END)\nAS high_price,\nFROM product;")])])}),[],!1,null,null,null);t.default=a.exports}}]);