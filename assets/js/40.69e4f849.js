(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{616:function(n,e,t){"use strict";t.r(e);var r=t(7),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h2",{attrs:{id:"练习一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习一"}},[n._v("#")]),n._v(" 练习一")]),n._v(" "),t("p",[t("strong",[n._v("各部门工资最高的员工（难度：中等）")]),n._v(" 创建Employee 表，包含所有员工信息，每个员工有其对应的 Id, salary 和 department\nId。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n+----+-------+--------+--------------+")]),n._v(" "),t("p",[n._v("创建Department 表，包含公司所有部门的信息。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+----------+\n| Id | Name     |\n+----+----------+\n| 1  | IT       |\n| 2  | Sales    |\n+----+----------+")]),n._v(" "),t("p",[n._v("编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| Sales      | Henry    | 80000  |\n+------------+----------+--------+")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v('\n// 创建Employee 表格\nprivate static void createTable(Statement stmt) throws SQLException{\nString sql = "create table Employee("            //"+"这个只是起到一个语句之间的连接作用\n+" Id INT NOT NULL,"\n+" Name VARCHAR(32) NOT NULL,"\n+" Salary INT NOT NULL,"\n+" DepartmentId INT NOT NULL,"\n+" PRIMARY KEY (Id))"\n+" comment= \'Employee Info Table\';";\nint count = stmt.executeUpdate(sql);\nSystem.out.println(count);\n}')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    //插入记录\n    private static void insertRecord(Statement stmt) throws SQLException{\n        List<String> sqlList = Arrays.asList(\n                \"insert into Employee VALUES (1, 'Joe', 70000, 1)\",\n                \"insert into Employee VALUES (2, 'Henry', 80000, 2)\",\n                \"insert into Employee VALUES (3, 'Sam', 60000, 2)\",\n                \"insert into Employee VALUES (4, 'Max', 90000, 1)\"\n        );\n        for (String sql : sqlList){\n            int count = stmt.executeUpdate(sql);\n            System.out.println(count);\n        }\n\n    }\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v('\n// 创建Department 表格\nprivate static void createTable(Statement stmt) throws SQLException{\nString sql = "create table Department("            //"+"这个只是起到一个语句之间的连接作用\n+" Id INT NOT NULL,"\n+" Name VARCHAR(32) NOT NULL,"\n+" PRIMARY KEY (Id))"\n+" comment= \'Department Info Table\';";\nint count = stmt.executeUpdate(sql);\nSystem.out.println(count);\n}')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    //插入记录\n    private static void insertRecord(Statement stmt) throws SQLException{\n        List<String> sqlList = Arrays.asList(\n                \"insert into Department VALUES (1, 'IT')\",\n                \"insert into Department VALUES (2, 'Sales')\"\n        );\n        for (String sql : sqlList){\n            int count = stmt.executeUpdate(sql);\n            System.out.println(count);\n        }\n\n    }\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT DepartmentId, MAX(Salary) AS Salary\nFROM Employee\nGROUP BY DepartmentId")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228210114.png",alt:""}})]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\nSELECT e.Name AS Department, d.Name AS Employee, d.Salary\nFROM Employee AS d\nJOIN Department AS e\nON e.Id = d.DepartmentId")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228210358.png",alt:""}})]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\nSELECT e.Name AS Department, d.Name AS Employee, d.Salary\nFROM Employee AS d\nJOIN Department AS e\nON e.Id = d.DepartmentId\nWHERE (DepartmentId, Salary)\nIN (\nSELECT DepartmentId, MAX(Salary) AS Salary\nFROM Employee\nGROUP BY DepartmentId)")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228210227.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习二"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习二"}},[n._v("#")]),n._v(" 练习二")]),n._v(" "),t("p",[t("strong",[n._v("换座位（难度：中等）")]),n._v(" 小美是一所中学的信息科技老师，她有一张 seat 座位表，平时用来储存学生名字和与他们相对应的座位 id。 其中纵列的\n"),t("strong",[n._v("id")]),n._v(" 是连续递增的 小美想改变相邻俩学生的座位。 你能不能帮她写一个 SQL query 来输出小美想要的结果呢？ 请创建如下所示seat表：\n"),t("strong",[n._v("示例：")])]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Abbot   |\n|    2    | Doris   |\n|    3    | Emerson |\n|    4    | Green   |\n|    5    | Jeames  |\n+---------+---------+")]),n._v(" "),t("p",[n._v("假如数据输入的是上表，则输出结果如下：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+---------+---------+\n|    id   | student |\n+---------+---------+\n|    1    | Doris   |\n|    2    | Abbot   |\n|    3    | Green   |\n|    4    | Emerson |\n|    5    | Jeames  |\n+---------+---------+")]),n._v(" "),t("p",[t("strong",[n._v("注意：")]),n._v(" 如果学生人数是奇数，则不需要改变最后一个同学的座位。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\nCREATE TABLE seat(\nid INTEGER NOT NULL,\nstudent VARCHAR(32) NOT NULL,\nPRIMARY KEY (id)\n);")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("INSERT INTO seat VALUES (1, 'Abbot');\nINSERT INTO seat VALUES (2, 'Doris');\nINSERT INTO seat VALUES (3, 'Emerson');\nINSERT INTO seat VALUES (4, 'Green');\nINSERT INTO seat VALUES (5, 'Jeames');\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT\n(\nCASE WHEN id %2 = 0 THEN id-1 -- id是偶数\nWHEN id %2 = 1 AND counts = id THEN id -- id是奇数且是最后一个\nELSE id + 1 END -- id是奇数但不是最后一个\n)\nAS id, student\nFROM seat, (SELECT COUNT(1) AS counts FROM seat) c -- 个数\nORDER BY 1;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228212330.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习三"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习三"}},[n._v("#")]),n._v(" 练习三")]),n._v(" "),t("p",[t("strong",[n._v("分数排名（难度：中等")]),n._v(" ） 编写一个 SQL\n查询来实现分数排名。如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。\n创建以下score表：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+")]),n._v(" "),t("p",[n._v("例如，根据上述给定的 Scores 表，你的查询应该返回（按分数从高到低排列）：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 2    |\n| 3.65  | 3    |\n| 3.65  | 3    |\n| 3.50  | 4    |\n+-------+------+")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nCREATE TABLE score(\nId INTEGER NOT NULL,\nScore FLOAT NOT NULL,\nPRIMARY KEY (id)\n);")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("INSERT INTO score VALUES (1, 3.50);\nINSERT INTO score VALUES (2, 3.65);\nINSERT INTO score VALUES (3, 4.00);\nINSERT INTO score VALUES (4, 3.85);\nINSERT INTO score VALUES (5, 4.00);\nINSERT INTO score VALUES (6, 3.65);\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT Score,\nDENSE_RANK() over (ORDER BY Score DESC) AS 'Rank'\nFROM score;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228213200.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习四"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习四"}},[n._v("#")]),n._v(" 练习四")]),n._v(" "),t("p",[t("strong",[n._v("连续出现的数字（难度：中等）")]),n._v(" 编写一个 SQL 查询，查找所有至少连续出现三次的数字。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+-----+\n| Id | Num |\n+----+-----+\n| 1  |  1  |\n| 2  |  1  |\n| 3  |  1  |\n| 4  |  2  |\n| 5  |  1  |\n| 6  |  2  |\n| 7  |  2  |\n+----+-----+")]),n._v(" "),t("p",[n._v("例如，给定上面的 Logs 表， 1 是唯一连续出现至少三次的数字。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+-----------------+\n| ConsecutiveNums |\n+-----------------+\n| 1               |\n+-----------------+")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nCREATE TABLE numbers(\nId INTEGER NOT NULL,\nNum INTEGER NOT NULL,\nPRIMARY KEY (Id)\n);")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("INSERT INTO numbers VALUES (1, 1);\nINSERT INTO numbers VALUES (2, 1);\nINSERT INTO numbers VALUES (3, 1);\nINSERT INTO numbers VALUES (4, 2);\nINSERT INTO numbers VALUES (5, 1);\nINSERT INTO numbers VALUES (6, 2);\nINSERT INTO numbers VALUES (7, 2);\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT a.Num AS ConsecutiveNums\nFROM numbers a, numbers b, numbers c\nWHERE a.Id = b.Id-1 AND b.Id = c.Id-1 AND a.Num = b.Num AND b.Num = c.Num;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228213842.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习五"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习五"}},[n._v("#")]),n._v(" 练习五")]),n._v(" "),t("p",[t("strong",[n._v("树节点 （难度：中等）")]),n._v(" 对于 "),t("strong",[n._v("tree")]),n._v(" 表， "),t("em",[n._v("id")]),n._v(" 是树节点的标识， "),t("em",[n._v("p_id")]),n._v(" 是其父节点的 "),t("em",[n._v("id")]),n._v(" 。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+------+\n| id | p_id |\n+----+------+\n| 1  | null |\n| 2  | 1    |\n| 3  | 1    |\n| 4  | 2    |\n| 5  | 2    |\n+----+------+")]),n._v(" "),t("p",[n._v("每个节点都是以下三种类型中的一种：")]),n._v(" "),t("ul",[t("li",[n._v("Root: 如果节点是根节点。")]),n._v(" "),t("li",[n._v("Leaf: 如果节点是叶子节点。")]),n._v(" "),t("li",[n._v("Inner: 如果节点既不是根节点也不是叶子节点。")])]),n._v(" "),t("p",[n._v("写一条查询语句打印节点id及对应的节点类型。按照节点id排序。上面例子的对应结果为：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+------+\n| id | Type |\n+----+------+\n| 1  | Root |\n| 2  | Inner|\n| 3  | Leaf |\n| 4  | Leaf |\n| 5  | Leaf |\n+----+------+")]),n._v(" "),t("p",[t("strong",[n._v("说明")])]),n._v(" "),t("ul",[t("li",[n._v("节点’1’是根节点，因为它的父节点为NULL，有’2’和’3’两个子节点。")]),n._v(" "),t("li",[n._v("节点’2’是内部节点，因为它的父节点是’1’，有子节点’4’和’5’。")]),n._v(" "),t("li",[n._v("节点’3’，‘4’，'5’是叶子节点，因为它们有父节点但没有子节点。")])]),n._v(" "),t("p",[n._v("下面是树的图形：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n1"),t("br"),n._v("\n/   \\\n2    3"),t("br"),n._v("\n/ "),t("br"),n._v("\n4  5")]),n._v(" "),t("p",[t("strong",[n._v("注意")]),n._v(" 如果一个树只有一个节点，只需要输出根节点属性。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\nCREATE TABLE tree(\nid INTEGER NOT NULL,\np_id INTEGER,\nPRIMARY KEY (id)\n);")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("INSERT INTO tree VALUES (1, null);\nINSERT INTO tree VALUES (2, 1);\nINSERT INTO tree VALUES (3, 1);\nINSERT INTO tree VALUES (4, 2);\nINSERT INTO tree VALUES (5, 2);\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT id,\n(\nCASE WHEN p_id IS NULL THEN 'Root'\nWHEN id > pids THEN 'Leaf'\nELSE 'Inner' END\n) AS TYPE\nFROM tree,\n(\nSELECT MAX(p_id) AS pids FROM tree\n) a;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228214436.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习六"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习六"}},[n._v("#")]),n._v(" 练习六")]),n._v(" "),t("p",[t("strong",[n._v("至少有五名直接下属的经理 （难度：中等）")]),n._v(" "),t("strong",[n._v("Employee")]),n._v("\n表包含所有员工及其上级的信息。每位员工都有一个Id，并且还有一个对应主管的Id（ManagerId）。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+------+----------+-----------+----------+\n|Id    |Name      |Department |ManagerId |\n+------+----------+-----------+----------+\n|101   |John      |A          |null      |\n|102   |Dan       |A          |101       |\n|103   |James     |A          |101       |\n|104   |Amy       |A          |101       |\n|105   |Anne      |A          |101       |\n|106   |Ron       |B          |101       |\n+------+----------+-----------+----------+")]),n._v(" "),t("p",[n._v("针对 "),t("strong",[n._v("Employee")]),n._v(" 表，写一条SQL语句找出有5个下属的主管。对于上面的表，结果应输出：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+-------+\n| Name  |\n+-------+\n| John  |\n+-------+")]),n._v(" "),t("p",[t("strong",[n._v("注意:")]),n._v(" 没有人向自己汇报。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\ncreate table Employees(\nId INTEGER  primary key ,\nName VARCHAR(20),\nDepartment VARCHAR(5),\nManagerId  INTEGER\n);\ninsert into Employees value(101,'John','A',NULL);\ninsert into Employees value(102,'Dan','A',101);\ninsert into Employees value(103,'James','A',101);\ninsert into Employees value(104,'Amy','A',101);\ninsert into Employees value(105,'Anne','A',101);\ninsert into Employees value(106,'Ron','B',101);")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT ManagerId AS counts\nFROM Employees\nWHERE ManagerId IS NOT NULL\nGROUP BY ManagerId\nHAVING COUNT(*) >= 5 ;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228214903.png",alt:""}})]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\nSELECT Name FROM Employees\nWHERE Id IN\n(\nSELECT ManagerId AS counts\nFROM Employees\nWHERE ManagerId IS NOT NULL\nGROUP BY ManagerId\nHAVING COUNT(*) >= 5\n);")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228215023.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习七"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习七"}},[n._v("#")]),n._v(" 练习七")]),n._v(" "),t("p",[t("strong",[n._v("分数排名 （难度：中等）")]),n._v(" 创建以下score表：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+-------+\n| Id | Score |\n+----+-------+\n| 1  | 3.50  |\n| 2  | 3.65  |\n| 3  | 4.00  |\n| 4  | 3.85  |\n| 5  | 4.00  |\n| 6  | 3.65  |\n+----+-------+")]),n._v(" "),t("p",[n._v("练习三的分数表，实现排名功能，但是排名需要是非连续的，如下：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+-------+------+\n| Score | Rank |\n+-------+------+\n| 4.00  | 1    |\n| 4.00  | 1    |\n| 3.85  | 3    |\n| 3.65  | 4    |\n| 3.65  | 4    |\n| 3.50  | 6    |\n+-------+------")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT Score, RANK() over (ORDER BY Score DESC) AS ranking\nFROM score;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228215216.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习八"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习八"}},[n._v("#")]),n._v(" 练习八")]),n._v(" "),t("p",[t("strong",[n._v("查询回答率最高的问题 （难度：中等）")]),n._v(" 求出 "),t("strong",[n._v("survey_log")]),n._v(" 表中回答率最高的问题，表格的字段有： "),t("strong",[n._v("uid, action,\nquestion_id, answer_id, q_num, timestamp")]),n._v(' 。 uid是用户id；action的值为：“show”，\n“answer”，\n“skip”；当action是"answer"时，answer_id不为空，相反，当action是"show"和"skip"时为空（null）；q_num是问题的数字序号。\n写一条sql语句找出回答率最高的问题。 '),t("strong",[n._v("举例：")]),n._v(" "),t("strong",[n._v("输入")]),n._v(" uid | action | question_id | answer_id |")]),n._v(" "),t("table",[t("thead",[t("tr",[t("th",[n._v("q_num")]),n._v(" "),t("th",[n._v("timestamp")])])]),n._v(" "),t("tbody",[t("tr",[t("td",[n._v("5")]),n._v(" "),t("td",[n._v("show")])]),n._v(" "),t("tr",[t("td",[n._v("5")]),n._v(" "),t("td",[n._v("answer")])]),n._v(" "),t("tr",[t("td",[n._v("5")]),n._v(" "),t("td",[n._v("show")])]),n._v(" "),t("tr",[t("td",[n._v("5")]),n._v(" "),t("td",[n._v("skip")])])])]),n._v(" "),t("h2",{attrs:{id:"输出-survey-log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出-survey-log"}},[n._v("#")]),n._v(" "),t("strong",[n._v("输出")]),n._v(" survey_log")]),n._v(" "),t("p",[n._v("285"),t("br"),n._v(" "),t("strong",[n._v("说明")]),n._v(" 问题285的回答率为1/1，然而问题369的回答率是0/1，所以输出是285。 "),t("strong",[n._v("注意：")]),n._v("\n最高回答率的意思是：同一个问题出现的次数中回答的比例。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v('\ncreate table survey_log(\nuid INTEGER,\naction  VARCHAR(10),\nquestion_id  INTEGER,\nanswer_id INTEGER,\nq_num  INTEGER,\ntimestamp  INTEGER\n);\nINSERT INTO survey_log value(5,"show",285,null,1,123);\nINSERT INTO survey_log  value(5,"answer",285,124124,1,124);\nINSERT INTO survey_log  value(5,"show",369,null,2,125);\nINSERT INTO survey_log  value(5,"show",369,null,2,126);')]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT question_id, COUNT(answer_id) AS counts\nFROM survey_log GROUP BY question_id\nORDER BY counts DESC;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228215625.png",alt:""}})]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\nSELECT a.question_id\nFROM\n(\nSELECT question_id, COUNT(answer_id) AS counts\nFROM survey_log GROUP BY question_id\nORDER BY counts DESC\n) a\nLIMIT 1;")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228215715.png",alt:""}})]),n._v(" "),t("h2",{attrs:{id:"练习九"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习九"}},[n._v("#")]),n._v(" 练习九")]),n._v(" "),t("p",[t("strong",[n._v("各部门前3高工资的员工（难度：中等）")]),n._v(" 将项目7中的employee表清空，重新插入以下数据（其实是多插入5,6两行）：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----+-------+--------+--------------+\n| Id | Name  | Salary | DepartmentId |\n+----+-------+--------+--------------+\n| 1  | Joe   | 70000  | 1            |\n| 2  | Henry | 80000  | 2            |\n| 3  | Sam   | 60000  | 2            |\n| 4  | Max   | 90000  | 1            |\n| 5  | Janet | 69000  | 1            |\n| 6  | Randy | 85000  | 1            |\n+----+-------+--------+--------------+")]),n._v(" "),t("p",[n._v("编写一个 SQL 查询，找出每个部门工资前三高的员工。例如，根据上述给定的表格，查询结果应返回：")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+------------+----------+--------+\n| Department | Employee | Salary |\n+------------+----------+--------+\n| IT         | Max      | 90000  |\n| IT         | Randy    | 85000  |\n| IT         | Joe      | 70000  |\n| Sales      | Henry    | 80000  |\n| Sales      | Sam      | 60000  |\n+------------+----------+--------+")]),n._v(" "),t("p",[n._v("此外，请考虑实现各部门前N高工资的员工功能。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v('\ncreate table Employee2\n(\nId INTEGER PRIMARY KEY auto_increment,\nName VARCHAR(10),\nSalary  INTEGER ,\nSepartmentId INTEGER\n);\nINSERT INTO Employee2 value(0,"Joe",70000,1);\nINSERT INTO Employee2 value(0,"Henry",80000,2);\nINSERT INTO Employee2 value(0,"Sam",60000,2);\nINSERT INTO Employee2 value(0,"Max",90000,1);\nINSERT INTO Employee2 value(0,"Janet",69000,1);\nINSERT INTO Employee2 value(0,"Randy",85000,1);')]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT Department,Employee,Salary\nFROM(\nSELECT department.Name 'Department',Employee.name 'Employee',Salary,ROW_NUMBER() OVER(PARTITION BY department.Id ORDER BY Salary DESC) 'ranking'\nFROM employee INNER JOIN department\nON employee.departmentid = department.Id) t1\nWHERE ranking <= 3;")]),n._v(" "),t("h2",{attrs:{id:"练习十"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习十"}},[n._v("#")]),n._v(" 练习十")]),n._v(" "),t("p",[t("strong",[n._v("平面上最近距离 (难度: 困难）")]),n._v(" "),t("strong",[n._v("point_2d")]),n._v(" 表包含一个平面内一些点（超过两个）的坐标值（x，y）。\n写一条查询语句求出这些点中的最短距离并保留2位小数。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n|x   | y  |\n|----|----|\n| -1 | -1 |\n|  0 |  0 |\n| -1 | -2 |")]),n._v(" "),t("p",[n._v("最短距离是1，从点（-1，-1）到点（-1，-2）。所以输出结果为： | shortest | 1.00")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+--------+\n|shortest|\n+--------+\n|1.00    |\n+--------+")]),n._v(" "),t("p",[t("strong",[n._v("注意：")]),n._v(" 所有点的最大距离小于10000。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\ncreate table point_2d (\nx INTEGER ,\nY INTEGER\n);\nINSERT INTO point_2d value(-1,-1);\nINSERT INTO point_2d value(0,0);\nINSERT INTO point_2d value(-1,-2);")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT MIN(POW(p1.x - p2.x, 2) + POW(p1.y - p2.y, 2)) shortest\nFROM point_2d p1 CROSS JOIN point_2d p2\nON (p1.x <> p2.x OR p1.y <> p2.y);")]),n._v(" "),t("h2",{attrs:{id:"练习十一"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#练习十一"}},[n._v("#")]),n._v(" 练习十一")]),n._v(" "),t("p",[t("strong",[n._v("行程和用户（难度：困难）")]),n._v(" Trips 表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 Users\n表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (‘completed’, ‘cancelled_by_driver’,\n‘cancelled_by_client’)。  Id | Client_Id | Driver_Id | City_Id | Status |\nRequest_at"),t("br"),n._v("\n---|---|---|---|---|---"),t("br"),n._v("\n1 | 1 | 10 | 1 | completed | 2013-10-1"),t("br"),n._v("\n2 | 2 | 11 | 1 | cancelled_by_driver | 2013-10-1"),t("br"),n._v("\n3 | 3 | 12 | 6 | completed | 2013-10-1"),t("br"),n._v("\n4 | 4 | 13 | 6 | cancelled_by_client | 2013-10-1"),t("br"),n._v("\n5 | 1 | 10 | 1 | completed | 2013-10-2"),t("br"),n._v("\n6 | 2 | 11 | 6 | completed | 2013-10-2"),t("br"),n._v("\n7 | 3 | 12 | 6 | completed | 2013-10-2"),t("br"),n._v("\n8 | 2 | 12 | 12 | completed | 2013-10-3"),t("br"),n._v("\n9 | 3 | 10 | 12 | completed | 2013-10-3"),t("br"),n._v("\n10 | 4 | 13 | 12 | cancelled_by_driver | 2013-10-3"),t("br"),n._v("\nUsers 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’,\n‘driver’, ‘partner’）的枚举类型。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+----------+--------+--------+\n| Users_Id | Banned |  Role  |\n+----------+--------+--------+\n|    1     |   No   | client |\n|    2     |   Yes  | client |\n|    3     |   No   | client |\n|    4     |   No   | client |\n|    10    |   No   | driver |\n|    11    |   No   | driver |\n|    12    |   No   | driver |\n|    13    |   No   | driver |\n+----------+--------+--------+")]),n._v(" "),t("p",[n._v("写一段 SQL 语句查出 "),t("strong",[n._v("2013年10月1日")]),n._v(" 至 "),t("strong",[n._v("2013年10月3日")]),n._v(" 期间非禁止用户的取消率。基于上表，你的 SQL\n语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n+------------+-------------------+\n|     Day    | Cancellation Rate |\n+------------+-------------------+\n| 2013-10-01 |       0.33        |\n| 2013-10-02 |       0.00        |\n| 2013-10-03 |       0.50        |\n+------------+-------------------+")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v('\ncreate table Trips(\nId INTEGER PRIMARY KEY auto_increment,\nClient_Id INTEGER ,\nDriver_Id INTEGER,\nCity_Id INTEGER,\nStatus VARCHAR(50),\nRequest_at DATE\n);\nINSERT INTO Trips value(0,1,10,1,"completed","2013-10-1");\nINSERT INTO Trips value(0,2,11,1,"cancelled_by_driver","2013-10-1");\nINSERT INTO Trips value(0,3,12,1,"completed","2013-10-1");\nINSERT INTO Trips value(0,4,13,1,"cancelled_by_client","2013-10-1");\nINSERT INTO Trips value(0,1,10,1,"completed","2013-10-2");\nINSERT INTO Trips value(0,2,11,1,"completed","2013-10-2");\nINSERT INTO Trips value(0,3,12,1,"completed","2013-10-2");\nINSERT INTO Trips value(0,2,12,1,"completed","2013-10-3");\nINSERT INTO Trips value(0,3,10,1,"completed","2013-10-3");\nINSERT INTO Trips value(0,4,13,1,"cancelled_by_driver","2013-10-3");')]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v('\nCREATE TABLE Users(\nUsers_Id INTEGER ,\nBanned VARCHAR(5),\nRole VARCHAR(10)\n);\nINSERT INTO Users value(1,"No","client");\nINSERT INTO Users value(2,"Yes","client");\nINSERT INTO Users value(3,"No","client");\nINSERT INTO Users value(4,"No","client");\nINSERT INTO Users value(10,"No","driver");\nINSERT INTO Users value(11,"No","driver");\nINSERT INTO Users value(12,"No","driver");\nINSERT INTO Users value(13,"No","driver");')]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\n​"),t("br"),n._v("\nSELECT Request_at, SUM(CASE WHEN Status LIKE 'cancelled%' THEN 1 ELSE 0 END) / COUNT(*) ratio\nFROM Trips INNER JOIN Users\nON Trips.Client_Id = Users.Users_Id\nWHERE Banned <> 'Yes'\nGROUP BY Request_at;")]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20201228221002.png",alt:""}})])])}),[],!1,null,null,null);e.default=a.exports}}]);