(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{661:function(e,a,s){"use strict";s.r(a);var _=s(7),t=Object(_.a)({},(function(){var e=this,a=e.$createElement,s=e._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"提交结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交结果"}},[e._v("#")]),e._v(" 提交结果")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210224220213.png",alt:""}}),e._v("\n完整顺了一遍baseline，用KNN进行经纬度距离计算，分数有提高一点～")]),e._v(" "),s("h2",{attrs:{id:"赛题任务解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赛题任务解析"}},[e._v("#")]),e._v(" 赛题任务解析")]),e._v(" "),s("h3",{attrs:{id:"赛题任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#赛题任务"}},[e._v("#")]),e._v(" 赛题任务")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("赛题任务")]),e._v("：识别出工作日早高峰07:00-09:00潮汐现象最突出的40个区域，针对Top40区域计算结果进一步设计高峰期共享单车潮汐点优化方案；")]),e._v(" "),s("li",[s("code",[e._v("赛题数据")]),e._v("：共享单车轨迹数据、共享单车停车点位（电子围栏）数据 和 共享单车订单数据；")])]),e._v(" "),s("h3",{attrs:{id:"数据说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据说明"}},[e._v("#")]),e._v(" 数据说明")]),e._v(" "),s("ul",[s("li",[e._v("gxdc_gj20201221.csv：共享单车轨迹数据\n"),s("ul",[s("li",[e._v("BICYCLE_ID：车辆编码")]),e._v(" "),s("li",[e._v("LOCATING_TIME：定位时间")]),e._v(" "),s("li",[e._v("LATITUDE：纬度（WGS84坐标）")]),e._v(" "),s("li",[e._v("LONGITUDE：经度（WGS84坐标）")])])]),e._v(" "),s("li",[e._v("gxdc_tcd.csv：共享单车停车点位（电子围栏）数据\n"),s("ul",[s("li",[e._v("FENCE_ID：电子围栏唯一编号")]),e._v(" "),s("li",[e._v("FENCE_LOC：电子围栏位置坐标串（包括电子围栏所在位置四个顶点的坐标信息，WGS84坐标）")])])]),e._v(" "),s("li",[e._v("gxdc_dd.csv：共享单车订单数据\n"),s("ul",[s("li",[e._v("BICYCLE_ID：车辆编码")]),e._v(" "),s("li",[e._v("LATITUDE：纬度（WGS84坐标）")]),e._v(" "),s("li",[e._v("LONGITUDE：经度（WGS84坐标）")]),e._v(" "),s("li",[e._v("LOCK_STATUS：锁的状态（0-开锁，1-关锁）")]),e._v(" "),s("li",[e._v("UPDATE_TIME：锁状态更新时间")])])])]),e._v(" "),s("h3",{attrs:{id:"数据探索"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据探索"}},[e._v("#")]),e._v(" 数据探索")]),e._v(" "),s("h4",{attrs:{id:"轨迹数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轨迹数据"}},[e._v("#")]),e._v(" 轨迹数据")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("读取数据 拼接不同天的单车轨迹数据，默认axis=0，按行拼接")]),e._v(" "),s("p",[e._v("bike_track = pd.concat([\npd.read_csv(PATH + 'gxdc_gj20201221.csv'),\npd.read_csv(PATH + 'gxdc_gj20201222.csv'),\npd.read_csv(PATH + 'gxdc_gj20201223.csv'),\npd.read_csv(PATH + 'gxdc_gj20201224.csv'),\npd.read_csv(PATH + 'gxdc_gj20201225.csv')")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("])\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[e._v("路线可视化 folium用于地图的可视化")]),e._v(" "),s("h1",{attrs:{id:"初始化中心位置和缩放尺度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化中心位置和缩放尺度"}},[e._v("#")]),e._v(" 初始化中心位置和缩放尺度")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("m = folium.Map(location=[24.482426, 118.157606], zoom_start=12)\n# 初始化单车的轨迹\nmy_PolyLine = folium.PolyLine(locations=bike_track[bike_track['BICYCLE_ID'] == '000152773681a23a7f2d9af8e8902703']\n                             [['LATITUDE', 'LONGITUDE']].values, weight=5)\n# 将轨迹添加至底图\nm.add_child(my_PolyLine)\n# 保存地图到html\nm.save('../output/track_example.html')\n")])])]),s("p",[e._v("示例：可视化一辆单车一天的轨迹 ![](https://my-imags.oss-cn-\nshanghai.aliyuncs.com/pic/20210224221345.png)")]),e._v(" "),s("h4",{attrs:{id:"电子围栏数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电子围栏数据"}},[e._v("#")]),e._v(" 电子围栏数据")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("读取数据")]),e._v(" "),s("p",[e._v("def bike_fence_format(s):\ns = s.replace('[', '').replace(']', '').split(',')\ns = np.array(s).astype(float).reshape(5, -1)\nreturn s")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_fence = pd.read_csv(PATH + 'gxdc_tcd.csv')\nbike_fence['FENCE_LOC'] = bike_fence['FENCE_LOC'].apply(bike_fence_format)\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[e._v("围栏可视化")]),e._v(" "),s("p",[e._v("fence_map = folium.Map(location=[24.482426, 118.157606], zoom_start=12)")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("# 逐个点标记，逐个点添🏠至底图\nfor data in bike_fence['FENCE_LOC'].values[:100]:\n   folium.Marker(list(data[0, ::-1])).add_to(fence_map)\nfence_map.save('../output/fence_example.html')\n")])])]),s("p",[e._v("示例：在地图上标记前100个电子围栏的点 ![](https://my-imags.oss-cn-\nshanghai.aliyuncs.com/pic/20210224222116.png)")]),e._v(" "),s("h4",{attrs:{id:"订单数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#订单数据"}},[e._v("#")]),e._v(" 订单数据")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("读数据")]),e._v(" "),s("p",[e._v("bike_order = pd.read_csv(PATH + 'gxdc_dd.csv')")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_order = bike_order.sort_values(['BICYCLE_ID', 'UPDATE_TIME'])\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[e._v("单车位置可视化")]),e._v(" "),s("p",[e._v("order_map = folium.Map(location=[24.482426, 118.157606], zoom_start=12)")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("# 一辆单车各个时刻的轨迹点，连接成线\norder_PolyLine = folium.PolyLine(locations=bike_order[bike_order['BICYCLE_ID'] == '0000ff105fd5f9099b866bccd157dc50']\n                                [['LATITUDE', 'LONGITUDE']].values, weight=5)\norder_map.add_child(order_PolyLine)\norder_map.save('../output/order_example.html')\n")])])]),s("p",[e._v("示例：一辆单车多天的轨迹 ![](https://my-imags.oss-cn-\nshanghai.aliyuncs.com/pic/20210224222640.png)")]),e._v(" "),s("h2",{attrs:{id:"共享单车潮汐点分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享单车潮汐点分析"}},[e._v("#")]),e._v(" 共享单车潮汐点分析")]),e._v(" "),s("h3",{attrs:{id:"分析目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析目标"}},[e._v("#")]),e._v(" 分析目标")]),e._v(" "),s("ul",[s("li",[e._v("共享单车订单与停车点匹配")]),e._v(" "),s("li",[e._v("统计并可视化停车点潮汐情况")]),e._v(" "),s("li",[e._v("计算工作日早高峰07:00-09:00潮汐现象最突出的40个区域")])]),e._v(" "),s("h3",{attrs:{id:"数据处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据处理"}},[e._v("#")]),e._v(" 数据处理")]),e._v(" "),s("h4",{attrs:{id:"电子围栏数据处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电子围栏数据处理"}},[e._v("#")]),e._v(" 电子围栏数据处理")]),e._v(" "),s("p",[e._v("​"),s("br"),e._v("\n# 得出停车点 LATITUDE 范围\nbike_fence['MIN_LATITUDE'] = bike_fence['FENCE_LOC'].apply(lambda x: np.min(x[:, 1]))\nbike_fence['MAX_LATITUDE'] = bike_fence['FENCE_LOC'].apply(lambda x: np.max(x[:, 1]))")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("# 得到停车点 LONGITUDE 范围\nbike_fence['MIN_LONGITUDE'] = bike_fence['FENCE_LOC'].apply(lambda x: np.min(x[:, 0]))\nbike_fence['MAX_LONGITUDE'] = bike_fence['FENCE_LOC'].apply(lambda x: np.max(x[:, 0]))\n\nfrom geopy.distance import geodesic\n# 使用测地线距离衡量电子围栏的面积\nbike_fence['FENCE_AREA'] = bike_fence.apply(lambda x: geodesic(\n    (x['MIN_LATITUDE'], x['MIN_LONGITUDE']), (x['MAX_LATITUDE'], x['MAX_LONGITUDE'])\n).meters, axis=1)\n\n# 计算电子围栏的中心经纬度\nbike_fence['FENCE_CENTER'] = bike_fence['FENCE_LOC'].apply(\n    lambda x: np.mean(x[:-1, ::-1], 0)\n)\n")])])]),s("h3",{attrs:{id:"订单数据处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#订单数据处理"}},[e._v("#")]),e._v(" 订单数据处理")]),e._v(" "),s("p",[e._v("​"),s("br"),e._v("\n# 订单数据的时间特征提取\nbike_order['UPDATE_TIME'] = pd.to_datetime(bike_order['UPDATE_TIME'])\nbike_order['DAY'] = bike_order['UPDATE_TIME'].dt.day.astype(object)\nbike_order['DAY'] = bike_order['DAY'].apply(str)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_order['HOUR'] = bike_order['UPDATE_TIME'].dt.hour.astype(object)\nbike_order['HOUR'] = bike_order['HOUR'].apply(str)\nbike_order['HOUR'] = bike_order['HOUR'].str.pad(width=2,side='left',fillchar='0')\n\n# 日期和时间进行拼接\nbike_order['DAY_HOUR'] = bike_order['DAY'] + bike_order['HOUR']\n")])])]),s("h4",{attrs:{id:"geohash编码经纬度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#geohash编码经纬度"}},[e._v("#")]),e._v(" Geohash编码经纬度")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("geohash基本原理： 是将地球理解为一个二维平面，将平面递归分解成更小的子块，每个子块在一定经纬度范围内拥有相同的编码")])]),e._v(" "),s("li",[s("p",[e._v("geohash特性：")]),e._v(" "),s("ol",[s("li",[e._v("不同的编码长度，表示不同的范围区间，字符串越长，表示的范围越精确\n2. 字符串相似的表示距离相近\n"),s("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210224224828.png",alt:""}})])])]),e._v(" "),s("li",[s("p",[e._v("对订单数据和电子围栏数据的经纬度信息，进行geohash编码")]),e._v(" "),s("p",[e._v("import geohash")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_order['geohash'] = bike_order.apply(\n   lambda x: geohash.encode(x['LATITUDE'], x['LONGITUDE'], precision=6), \naxis=1)\n\nbike_fence['geohash'] = bike_fence['FENCE_CENTER'].apply(\n   lambda x: geohash.encode(x[0], x[1], precision=6)\n)\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[e._v("geohash学习：\n"),s("ol",[s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/feiquan/p/11380461.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("geohash介绍"),s("OutboundLink")],1),e._v("\n2. "),s("a",{attrs:{href:"https://coggle.club/learn/dcic2020/task5",target:"_blank",rel:"noopener noreferrer"}},[e._v("DCIC2020"),s("OutboundLink")],1)])])])]),e._v(" "),s("h4",{attrs:{id:"电子围栏内流量统计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电子围栏内流量统计"}},[e._v("#")]),e._v(" 电子围栏内流量统计")]),e._v(" "),s("p",[e._v("使用透视表统计每个区域在不同时间的入流量和出流量：")]),e._v(" "),s("p",[e._v("​"),s("br"),e._v("\n# LOCK_STATUS=1,表示关锁，将单车停入电子围栏，为入流量\nbike_inflow = pd.pivot_table(bike_order[bike_order['LOCK_STATUS'] == 1],\nvalues='LOCK_STATUS', index=['geohash'],\ncolumns=['DAY_HOUR'], aggfunc='count', fill_value=0\n)")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_outflow = pd.pivot_table(bike_order[bike_order['LOCK_STATUS'] == 0], \n                   values='LOCK_STATUS', index=['geohash'],\n                    columns=['DAY_HOUR'], aggfunc='count', fill_value=0\n)\n")])])]),s("p",[s("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210224230400.png",alt:""}})]),e._v(" "),s("h4",{attrs:{id:"电子围栏潮汐情况可视化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#电子围栏潮汐情况可视化"}},[e._v("#")]),e._v(" 电子围栏潮汐情况可视化")]),e._v(" "),s("p",[e._v("​"),s("br"),e._v("\nbike_inflow.loc['wsk593'].plot()\nbike_outflow.loc['wsk593'].plot()\nplt.xticks(list(range(bike_inflow.shape[1])), bike_inflow.columns, rotation=40)\nplt.legend(['入流量', '出流量'])")]),e._v(" "),s("p",[e._v("下图表示：wsk593编码对应的区域多天的单车停入量和驶出量 ![](https://my-imags.oss-cn-\nshanghai.aliyuncs.com/pic/20210224225533.png)")]),e._v(" "),s("h3",{attrs:{id:"匹配计算潮汐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匹配计算潮汐"}},[e._v("#")]),e._v(" 匹配计算潮汐")]),e._v(" "),s("h4",{attrs:{id:"geohash匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#geohash匹配"}},[e._v("#")]),e._v(" Geohash匹配")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("计算每个区域的留存流量")]),e._v(" "),s("p",[e._v("bike_remain = (bike_inflow - bike_outflow).fillna(0)")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("# 存在骑走的车数量 大于 进来的车数量\nbike_remain[bike_remain < 0] = 0  \n\n# 按照天求和：某个区域的多天的留存量之和\nbike_remain = bike_remain.sum(1)\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[e._v("统计街道维度的潮汐情况")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("提取街道信息 "),s("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210224230910.png",alt:""}})]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v(" bike_fence['STREET'] = bike_fence['FENCE_ID'].apply(lambda x: x.split('_')[0])\n")])])])]),e._v(" "),s("li",[s("p",[e._v("计算街道的留存车辆密度")])]),e._v(" "),s("li",[s("p",[e._v("先按照街道名称分组")])]),e._v(" "),s("li",[s("p",[e._v("再提取出geohash列")])]),e._v(" "),s("li",[s("p",[e._v("再对geohash列去重（不重复计算相同区域的留存量）")])]),e._v(" "),s("li",[s("p",[e._v("再计算每一个编码区域的留存车辆")])]),e._v(" "),s("li",[s("p",[e._v("然后计算每个街道所有区域的面积和")])]),e._v(" "),s("li",[s("p",[e._v("最后求出街道维度的留存车辆密度")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("   # 留存车辆 / 街道停车位总面积，计算得到密度\n")])])]),s("p",[e._v("bike_density = bike_fence.groupby(['STREET'])['geohash'].unique().apply(\nlambda hs: np.sum([bike_remain[x] for x in hs])\n) / bike_fence.groupby(['STREET'])['FENCE_AREA'].sum()")])])]),e._v(" "),s("h1",{attrs:{id:"按照密度倒序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#按照密度倒序"}},[e._v("#")]),e._v(" 按照密度倒序")]),e._v(" "),s("p",[e._v("bike_density = bike_density.sort_values(ascending=False).reset_index()")])])]),e._v(" "),s("h4",{attrs:{id:"距离匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#距离匹配"}},[e._v("#")]),e._v(" 距离匹配")]),e._v(" "),s("ol",[s("li",[s("p",[e._v("使用电子围栏的中心点经纬度数据拟合knn haversine：经纬度计算距离")]),e._v(" "),s("p",[e._v("from sklearn.neighbors import NearestNeighbors")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("# https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.DistanceMetric.html\nknn = NearestNeighbors(metric = \"haversine\", n_jobs=-1, algorithm='brute')\nknn.fit(np.stack(bike_fence['FENCE_CENTER'].values))\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[e._v("找到每个订单最近的一个电子围栏，（距离，电子围栏的index） 全量数据耗时约5分钟")]),e._v(" "),s("p",[e._v("dist, index = knn.kneighbors(bike_order[['LATITUDE','LONGITUDE']].values[:], n_neighbors=1)")])]),e._v(" "),s("li",[s("p",[e._v("计算所有停车点的潮汐流量")]),e._v(" "),s("h1",{attrs:{id:"订单最近的电子围栏的id"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#订单最近的电子围栏的id"}},[e._v("#")]),e._v(" 订单最近的电子围栏的ID")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_order['fence'] = bike_fence.iloc[index.flatten()]['FENCE_ID'].values\n\n# 数据的每一行为一个FENCE_ID，每一列为某天的流量\nbike_inflow = pd.pivot_table(bike_order[bike_order['LOCK_STATUS'] == 1], \n                  values='LOCK_STATUS', index=['fence'],\n                   columns=['DAY'], aggfunc='count', fill_value=0\n)\n\nbike_outflow = pd.pivot_table(bike_order[bike_order['LOCK_STATUS'] == 0], \n                  values='LOCK_STATUS', index=['fence'],\n                   columns=['DAY'], aggfunc='count', fill_value=0\n)\n\nbike_remain = (bike_inflow - bike_outflow).fillna(0)\nbike_remain[bike_remain < 0] = 0  \nbike_remain = bike_remain.sum(1)\n")])])]),s("ol",{attrs:{start:"4"}},[s("li",[s("p",[e._v("计算停车点的密度 set_index：使用FENCE_ID作为索引")]),e._v(" "),s("p",[e._v("bike_density = bike_remain / bike_fence.set_index('FENCE_ID')['FENCE_AREA']")])])]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[e._v("bike_density = bike_density.sort_values(ascending=False).reset_index()\nbike_density = bike_density.fillna(0)\n")])])]),s("p",[s("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210224235644.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"结果输出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#结果输出"}},[e._v("#")]),e._v(" 结果输出")]),e._v(" "),s("p",[e._v("​"),s("br"),e._v("\n# label临时使用，后面被FENCE_TYPE替换\nbike_density['label'] = '0'\n# 前100行的FENCE_TYPE设置为1\nbike_density.iloc[:100, -1] = '1'\nbike_density['BELONG_AREA'] = '厦门'\n# 删除停车点的密度属性\nbike_density = bike_density.drop(0, axis=1)\nbike_density.columns = ['FENCE_ID', 'FENCE_TYPE', 'BELONG_AREA']\nbike_density.to_csv('../result/result.txt', index=None, sep='|')")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210224235401.png",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"优化方向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化方向"}},[e._v("#")]),e._v(" 优化方向")]),e._v(" "),s("ol",[s("li",[e._v("区域留存流量的计算，为什么会有单车驶出数量大于驶入数量多情况？为什么是求多天留存量之和，不是平均？")]),e._v(" "),s("li",[e._v("使用电子围栏的中心点经纬度拟合knn")])])])}),[],!1,null,null,null);a.default=t.exports}}]);