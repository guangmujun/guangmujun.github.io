(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{599:function(t,a,n){"use strict";n.r(a);var s=n(7),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_8-7-确认账户"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-确认账户"}},[t._v("#")]),t._v(" 8.7 确认账户")]),t._v(" "),n("p",[t._v("发送验证电子邮件，让用户点击一个包含确认令牌的特殊URL链接")]),t._v(" "),n("h3",{attrs:{id:"_8-7-1-使用itsdangerous生成确认令牌"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-1-使用itsdangerous生成确认令牌"}},[t._v("#")]),t._v(" 8.7.1 使用itsdangerous生成确认令牌")]),t._v(" "),n("p",[n("strong",[t._v("简单做法：")]),t._v(" 最简单的确认链接是："),n("code",[t._v("http://www.example.com/auth/confirm/<id>")]),t._v("，这种形式的URL，\n其中id是数据库分配给用户的数字id 用户点击链接后，处理这个路由的视图函数就将收到的用户id作为参数进行确认， 然后将用户状态更新为已确认 "),n("strong",[t._v("改进：")]),t._v("\n使用生成的令牌字符串代替简单的用户id "),n("code",[t._v("app/models.py")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    from itsdangerous import TimedJSONWebSignatureSerializer as Serializer\n​    from flask import current_app\n​    from . import db\n​"),n("br"),t._v("\nclass User(UserMixin, db.Model):\n"),n("strong",[t._v("tablename")]),t._v(" = 'users'\nid = db.Column(db.Integer, primary_key=True)\nemail = db.Column(db.String(64), unique=True, index=True)\nusername = db.Column(db.String(64), unique=True, index=True)\nrole_id = db.Column(db.Integer, db.ForeignKey('roles.id'))\npassword_hash = db.Column(db.String(128))\nconfirmed = db.Column(db.Boolean, default=False)  # 是否验证")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    def generate_confirmation_token(self, expiration=3600):\n        s = Serializer(current_app.config['SECRET_KEY'], expiration)\n        return s.dumps({'confirm': self.id})\n\n    def confirm(self, token):\n        s = Serializer(current_app.config['SECRET_KEY'])\n        try:\n            data = s.loads(token)\n        except:\n            return False\n        if data.get('confirm') != self.id:\n            return False\n            self.confirmed = True\n            db.session.add(self)\n        return True\n")])])]),n("p",[t._v("​"),n("br"),t._v("\n​")]),t._v(" "),n("ul",[n("li",[n("code",[t._v("generate_confirmation_token()")]),t._v("生成有效期为1个小时的令牌\n"),n("ul",[n("li",[n("code",[t._v("dumps()")]),t._v("方法为指定的数据生成一个加密签名，然后再对数据和签名进行序列化，生成令牌字符串")])])]),t._v(" "),n("li",[n("code",[t._v("confirm()")]),t._v("用来检验令牌\n"),n("ul",[n("li",[n("code",[t._v("TimedJSONWebSignatureSerializer")]),t._v("生成具有过期时间的JSON Web签名")]),t._v(" "),n("li",[n("code",[t._v("loads()")]),t._v("用来解码令牌，会检验签名和过期时间")]),t._v(" "),n("li",[t._v("令牌成功解码后，还会检查解码后的id和存储在"),n("code",[t._v("current_user")]),t._v("中的已登录的用户是否匹配")])])])]),t._v(" "),n("p",[n("strong",[t._v("User模型改动后的测试：")]),t._v(" "),n("code",[t._v("tests/test_basics.py")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​        def test_valid_confirmation_token(self):\n​            u = User(password='cat')\n​            db.session.add(u)\n​            db.session.commit()\n​            token = u.generate_confirmation_token()\n​            self.assertTrue(u.confirm(token))\n​"),n("br"),t._v("\ndef test_invalid_confirmation_token(self):\nu1 = User(password='cat')\nu2 = User(password='dog')\ndb.session.add(u1)\ndb.session.add(u2)\ndb.session.commit()\ntoken = u1.generate_confirmation_token()\nself.assertFalse(u2.confirm(token))")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("    def test_expired_confirmation_token(self):\n        u = User(password='cat')\n        db.session.add(u)\n        db.session.commit()\n        token = u.generate_confirmation_token(expiration=1)\n        time.sleep(2)\n        self.assertFalse(u.confirm(token))\n")])])]),n("h3",{attrs:{id:"_8-7-2-发送确认邮件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-2-发送确认邮件"}},[t._v("#")]),t._v(" 8.7.2 发送确认邮件")]),t._v(" "),n("p",[n("code",[t._v("app/auth/views.py")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    @auth.route('/register', methods=['GET', 'POST'])\n​    def register():\n​        form = RegistrationForm()\n​        if form.validate_on_submit():\n​            user = User(email=form.email.data,\n​                        username=form.username.data,\n​                        password=form.password.data)\n​            db.session.add(user)\n​            db.session.commit()  # 确认令牌需要用到id，提交数据库后才会生成id\n​            token = user.generate_confirmation_token()\n​            send_email(user.email, '确认您的注册账户', 'auth/email/confirm', user=user, token=token)\n​            flash('注册确认邮件已发送到您的邮件，请查收！')\n​            return redirect(url_for('auth.login'))\n​        return render_template('auth/register.html', form=form)")]),t._v(" "),n("p",[t._v("电子邮件模板 要使用"),n("code",[t._v("_external=True")]),t._v("生成绝对完整的URL， "),n("code",[t._v("templates/auth/email/confirm.html")])]),t._v(" "),n("div",{staticClass:"language-html line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Dear {{ user.username }},"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Welcome to "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Flasky"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("b")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("!"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("To confirm your account please "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("a")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{{ url_for("),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v("auth.confirm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("'")]),t._v(", token=token, _external=True) }}"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("click here"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("a")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("."),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Alternatively, you can paste the following link in your browser's address bar:"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ url_for('auth.confirm', token=token, _external=True) }}"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Sincerely,"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("The Flasky Team"),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("small")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Note: replies to this email address are not monitored."),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("small")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br")])]),n("p",[t._v("​")]),t._v(" "),n("p",[n("code",[t._v("templates/auth/email/confirm.txt")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v("Dear "+t._s(t.user.username)+",\nWelcome to Flasky!\n\nTo confirm your account please click on the following link:\n\n"+t._s(t.url_for("auth.confirm",t.token=t.token,t._external=t.True))+"\n\nSincerely,\n\nThe Flasky Team\n\nNote: replies to this email address are not monitored.\n")])])]),n("p",[t._v("​")]),t._v(" "),n("p",[t._v("确认账户的视图函数 "),n("code",[t._v("app/auth/views.py")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    @auth.route('/confirm/"),n("token",[t._v("')\n​    @login_required\n​    def confirm(token):\n​        if current_user.confirmed:                  # 目前用户已认证\n​            return redirect(url_for('main.index'))\n​        if current_user.confirm(token):             # 用户验证成功\n​            flash('您的账户已验证，欢迎！')\n​        else:\n​            flash('邮件中的验证链接已过期！')\n​        return redirect(url_for('main.index'))")])],1),t._v(" "),n("p",[t._v("要求用户在获取权限之前先确认账户 "),n("code",[t._v("app/auth/views.py")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    @auth.before_app_request\n​    def before_request():\n​        if current_user.is_authenticated "),n("br"),t._v("\n​                and not current_user.confirmed "),n("br"),t._v("\n​                and request.endpoint[:5] != 'auth.' "),n("br"),t._v("\n​                and request.endpoint != 'static':\n​            return redirect(url_for('auth.unconfirmed'))")]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    @auth.route('/unconfirmed')\n​    def unconfirmed():\n​        if current_user.is_anonymous or current_user.confirmed:\n​            return redirect(url_for('main.index'))\n​        return render_template('auth/unconfirmed.html')")]),t._v(" "),n("p",[n("code",[t._v("before_request")]),t._v("钩子，只能应用到属于蓝本的请求上， "),n("code",[t._v("before_app_request")]),t._v("可以在蓝本中使用针对程序全局请求的钩子\n满足以下3个条件时，"),n("code",[t._v("before_app_request")]),t._v("处理程序会拦截请求：")]),t._v(" "),n("ul",[n("li",[t._v("用户已登录")]),t._v(" "),n("li",[t._v("用户的账户还未确认")]),t._v(" "),n("li",[t._v("请求的端点不在认证蓝本中")])]),t._v(" "),n("p",[t._v("未确认用户的视图函数 "),n("code",[t._v("app/ayth/views.py")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    @auth.route('/confirm')\n​    @login_required\n​    def resend_confirmation():\n​        token = current_user.generate_confirmation_token()\n​        send_email(current_user.email, '确认您的账户', 'auth/email/confirm', user=current_user, token=token)\n​        flash(\"一封新的确认邮件已经发送到您的邮箱！\")\n​        return redirect(url_for('main.index'))")]),t._v(" "),n("p",[t._v("未确认用户的模板 "),n("code",[t._v("templates/auth/unconfirmed.html")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",[n("code",[t._v('{% extends "base.html" %}\n{% block title %}Flasky - Confirm your account{% endblock %}\n\n{% block page_content %}\n<div class="page-header">\n    <h1>\n        Hello, '+t._s(t.current_user.username)+'!\n    </h1>\n    <h3>You have not confirmed your account yet.</h3>\n    <p>\n        Before you can access this site you need to confirm your account.\n        Check your inbox, you should have received an email with a confirmation link.\n    </p>\n    <p>\n        Need another confirmation email?\n        <a href="'+t._s(t.url_for("auth.resend_confirmation"))+'">Click here</a>\n    </p>\n</div>\n{% endblock %}\n')])])]),n("p",[t._v("​")]),t._v(" "),n("h3",{attrs:{id:"_8-7-3-数据库更新与测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-3-数据库更新与测试"}},[t._v("#")]),t._v(" 8.7.3 数据库更新与测试")]),t._v(" "),n("p",[t._v("依次修改pycharm的运行参数进行运行")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("数据库迁移：db migrate -m “增加确认字段”")])]),t._v(" "),n("li",[n("p",[t._v("数据库更新：db upgrade")])]),t._v(" "),n("li",[n("p",[t._v("测试：test")])])]),t._v(" "),n("h3",{attrs:{id:"_8-7-4-效果展示"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-7-4-效果展示"}},[t._v("#")]),t._v(" 8.7.4 效果展示")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("在注册页面点击注册 "),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210317203246.png",alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("查看收到的邮件 "),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210317203337.png",alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("点击邮件中链接 "),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210317203400.png",alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("在链接中输入邮箱和密码，点击登录 "),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210317203437.png",alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("注册后，不点击邮箱中链接进行认证，而是直接输入账号密码登录 "),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210317203611.png",alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("点击上图中的链接， "),n("img",{attrs:{src:"https://my-imags.oss-cn-shanghai.aliyuncs.com/pic/20210317203638.png",alt:""}})])]),t._v(" "),n("li",[n("p",[t._v("再次收到邮件，点击邮件的认证链接，可正常登录")])])]),t._v(" "),n("h2",{attrs:{id:"问题记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#问题记录"}},[t._v("#")]),t._v(" 问题记录")]),t._v(" "),n("p",[n("strong",[t._v("问题一：")]),t._v(" 表单中的邮箱验证异常")]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    Exception: Install 'email_validator' for email validation support.")]),t._v(" "),n("p",[n("strong",[t._v("解决：")])]),t._v(" "),n("ol",[n("li",[t._v("安装email_validator")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    conda install email_validator")]),t._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[t._v("表单的py文件中引入email_validator即可")])]),t._v(" "),n("p",[t._v("​"),n("br"),t._v("\n​    import email_validator")])])}),[],!1,null,null,null);a.default=e.exports}}]);